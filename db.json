{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/hexo-theme-clean-blog/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/img/shenzhenwan.jpeg","path":"img/shenzhenwan.jpeg","modified":1,"renderable":0},{"_id":"source/img/webstorm-sass-config.png","path":"img/webstorm-sass-config.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/codepen-icon.svg","path":"img/codepen-icon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/github-octocat.svg","path":"img/github-octocat.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/jianshu.png","path":"img/jianshu.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/oschina.png","path":"img/oschina.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/segmentfault.png","path":"img/segmentfault.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/v2ex.png","path":"img/v2ex.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"source/img/xx-net/createPrj.png","path":"img/xx-net/createPrj.png","modified":1,"renderable":0},{"_id":"source/img/xx-net/config.png","path":"img/xx-net/config.png","modified":1,"renderable":0},{"_id":"source/img/xx-net/deploySetting.png","path":"img/xx-net/deploySetting.png","modified":1,"renderable":0},{"_id":"source/img/xx-net/status.png","path":"img/xx-net/status.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":1},{"_id":"source/img/shm-error.png","path":"img/shm-error.png","modified":1,"renderable":0},{"_id":"source/img/xx-net/shell.png","path":"img/xx-net/shell.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":1},{"_id":"source/img/sea2.png","path":"img/sea2.png","modified":1,"renderable":0},{"_id":"source/img/sea1.png","path":"img/sea1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b40dc7e6ec30c7bd81c41d88fc845cddbc3f1920","modified":1487903443000},{"_id":"source/favicon.ico","hash":"fcc54550eb569466ac4eb9750b734a54fdb7fdb3","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/_config.yml","hash":"e4f0c3f4a797254c2ba980630182c508810b429e","modified":1497614921000},{"_id":"source/_posts/centos-升级git-2-13-0.md","hash":"5a3edb7140f7f8b60ab2589e793387efc3531504","modified":1495159731000},{"_id":"source/_posts/crontab的一些使用.md","hash":"a01c316444f28625c16ba41b85c824b6285aa925","modified":1490616326000},{"_id":"source/_posts/php共享内存shmop和shm使用的一些坑.md","hash":"5a442b06c18f98c6c362b52d3d29dfde841d8657","modified":1542699640798},{"_id":"source/_posts/webstorm上使用sass.md","hash":"623115e8db6b99f6f4b72bb1c7a86f861365b0aa","modified":1490616358000},{"_id":"source/_posts/xx-net的配置笔记.md","hash":"718cb0f82f5665d19da3318a382daca86b78d454","modified":1487939265000},{"_id":"source/_posts/快速安装node笔记.md","hash":"c546c61afc57ca296a8e3d0b057145c3c3f8c9d0","modified":1491458770000},{"_id":"source/_posts/让git忽略ssl证书错误.md","hash":"37e9bb23bced2547209f4f20bba2d11f4b6f3a8a","modified":1487903443000},{"_id":"source/_posts/配置自己的MAC.md","hash":"a883cbad22c8409358be5950dd23cb9566a766c8","modified":1487903443000},{"_id":"source/about/index.md","hash":"a71bfdb47d179bce564f66f03053a4440d8b5fbc","modified":1488863274000},{"_id":"source/categories/index.md","hash":"0acb903ed15febfe0d574bf30a8f49ccec2a4909","modified":1487903443000},{"_id":"source/img/.DS_Store","hash":"6ad393e9fe701120a99e84a1e6e185e1b9364871","modified":1487995046000},{"_id":"source/tags/index.md","hash":"92c78e68048ed920963b3a4c9bf16d710493ca0e","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/zh-CN.yml","hash":"8ff033c17cec2478292950888df4877198bb3593","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/favicon.ico","hash":"fcc54550eb569466ac4eb9750b734a54fdb7fdb3","modified":1487903443000},{"_id":"source/img/shenzhenwan.jpeg","hash":"1b57bea637dcf55fa37297aa781b8f6213beffb8","modified":1490615466000},{"_id":"source/img/webstorm-sass-config.png","hash":"dde0574f38c7bc636c1592d1ea9ce99b3be2c7f5","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-full.ejs","hash":"00750a92f221f32522defcdcd9263ac27a36a885","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/baidu-analytics.ejs","hash":"869f7ac7244e8f90a209899ab29f293196f4689a","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/comments.ejs","hash":"04608b5e2b5bf934ea049ed4938ac18e12173d66","modified":1497584637000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/footer.ejs","hash":"aa5bafb9a7568e39f4916fe17a7427460cdad557","modified":1488010871000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/google-analytics.ejs","hash":"002422e52d7d78e33cdb66836a8d6e0b98fb2dfc","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/head.ejs","hash":"4925b1da665177403229ac1fcd2ab670f846bac8","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/share.ejs","hash":"4b9e07e4847702bc5ef831fb768e70632a93a960","modified":1488010507000},{"_id":"themes/hexo-theme-clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/css/base.styl","hash":"fea96945296b95f3a9b9a5b3093777cd80e1d457","modified":1488008818000},{"_id":"themes/hexo-theme-clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1487903444000},{"_id":"themes/hexo-theme-clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1487903443000},{"_id":"themes/hexo-theme-clean-blog/source/img/avatar.jpeg","hash":"9b0db2c050cd614cd43ef627210289b231d3fe88","modified":1487903444000},{"_id":"themes/hexo-theme-clean-blog/source/img/codepen-icon.svg","hash":"5d17083ce4e898ba89c666a9a4ce4df13e203777","modified":1437671421000},{"_id":"themes/hexo-theme-clean-blog/source/img/github-octocat.svg","hash":"b063ff6ae0ff0109b72324b0fa9b377cc1158412","modified":1437671502000},{"_id":"themes/hexo-theme-clean-blog/source/img/jianshu.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1487903444000},{"_id":"themes/hexo-theme-clean-blog/source/img/oschina.png","hash":"64604cb8ed07606ff0ddefdfb43acdc0e1bba942","modified":1488008609000},{"_id":"themes/hexo-theme-clean-blog/source/img/segmentfault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1487903444000},{"_id":"themes/hexo-theme-clean-blog/source/img/v2ex.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1487903444000},{"_id":"themes/hexo-theme-clean-blog/source/img/weibo.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1487903444000},{"_id":"source/img/xx-net/createPrj.png","hash":"37e522183783acb6f9b7971c519f639b08648e92","modified":1487928694000},{"_id":"source/img/xx-net/config.png","hash":"595deec3dfb8d1a804f2c118bc2bfe95700a555b","modified":1487929937000},{"_id":"source/img/xx-net/deploySetting.png","hash":"9eb1867e936df247e98e964b1ffd73864e7c2ec1","modified":1487929620000},{"_id":"source/img/xx-net/status.png","hash":"efda7bb844b708703e2a4b2ffd8ba3eff5ea260f","modified":1487930045000},{"_id":"themes/hexo-theme-clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1487903443000},{"_id":"source/img/shm-error.png","hash":"528e6bccebc59440b7fe0d921ae576ddcf6f46b5","modified":1542686108653},{"_id":"source/img/xx-net/shell.png","hash":"38ca6aad3f6f99cc01387085182ddf69c6a618cb","modified":1487929178000},{"_id":"themes/hexo-theme-clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1487903443000},{"_id":"source/img/sea2.png","hash":"5df568c02ab02d3e5f5f170528ddbd8dcd05a455","modified":1487903443000},{"_id":"source/img/sea1.png","hash":"400065cff151d4961cb695ceb3e5acbfa51a85cb","modified":1487903443000}],"Category":[],"Data":[],"Page":[{"title":"about me","date":"2017-02-23T05:14:14.000Z","cover":"/img/about-bg.jpg","comments":0,"_content":"\nHuster\n计院出身，卖马赎身\n伪果粉，喜欢夜跑深圳湾\nbase深圳，目前供职于一家金融服务公司\n\n\n#### 喜欢的格言\n走自己的路，让别人打的去吧!\n\n\n#### 联系方式\ndongqiaoershao@foxmail.com\n\n\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2017-02-23 13:14:14\ncover: /img/about-bg.jpg\ncomments: false\n---\n\nHuster\n计院出身，卖马赎身\n伪果粉，喜欢夜跑深圳湾\nbase深圳，目前供职于一家金融服务公司\n\n\n#### 喜欢的格言\n走自己的路，让别人打的去吧!\n\n\n#### 联系方式\ndongqiaoershao@foxmail.com\n\n\n","updated":"2017-03-07T05:07:54.000Z","path":"about/index.html","layout":"page","_id":"cjopfjjjh0001nc00rigk7tlw","content":"<p>Huster<br>计院出身，卖马赎身<br>伪果粉，喜欢夜跑深圳湾<br>base深圳，目前供职于一家金融服务公司</p>\n<h4 id=\"喜欢的格言\"><a href=\"#喜欢的格言\" class=\"headerlink\" title=\"喜欢的格言\"></a>喜欢的格言</h4><p>走自己的路，让别人打的去吧!</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><p>dongqiaoershao@foxmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Huster<br>计院出身，卖马赎身<br>伪果粉，喜欢夜跑深圳湾<br>base深圳，目前供职于一家金融服务公司</p>\n<h4 id=\"喜欢的格言\"><a href=\"#喜欢的格言\" class=\"headerlink\" title=\"喜欢的格言\"></a>喜欢的格言</h4><p>走自己的路，让别人打的去吧!</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><p>dongqiaoershao@foxmail.com</p>\n"},{"title":"categories","date":"2017-02-23T03:51:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-23 11:51:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-24T02:30:43.000Z","path":"categories/index.html","layout":"page","_id":"cjopfjjjj0003nc00msvjqr2x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-02-23T03:51:24.000Z","type":"tags","comments":0,"_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-23 11:51:24\ntype: \"tags\"\ncomments: false\n---\n\n\n","updated":"2017-02-24T02:30:43.000Z","path":"tags/index.html","layout":"page","_id":"cjopfjjjm0006nc00ovmsqkip","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"centos 升级git 2.13.0","date":"2017-05-19T00:23:38.000Z","cover":null,"_content":"\n## 一、安装相关工具\n```\n# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# yum install  gcc perl-ExtUtils-MakeMaker\n```\n\n## 二、卸载默认的git-1.7.1版本\n```\n# yum remove git\n```\n\n## 三、下载git安装包\n在 [这里](https://www.kernel.org/pub/software/scm/git/) 查看并选择git版本\n\n```\n# cd /usr/src\n# wget https://www.kernel.org/pub/software/scm/git/git-2.13.0.tar.gz\n# tar xzf git-2.13.0.tar.gz\n```\n\n## 四、安装git && 添加环境变量\n```\n# cd /usr/src/git-2.13.0\n# make prefix=/usr/local/git all\n# make prefix=/usr/local/git install\n# echo \"export PATH=$PATH:/usr/local/git/bin\" >> /etc/bashrc\n$ source /etc/bashrc\n```\n\n## 五、检验git安装是否成功\n```\n$ git --version\ngit version 2.13.0\n```\n\n","source":"_posts/centos-升级git-2-13-0.md","raw":"---\ntitle: centos 升级git 2.13.0\ndate: 2017-05-19 08:23:38\ncover:\ntags: [git]\n---\n\n## 一、安装相关工具\n```\n# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# yum install  gcc perl-ExtUtils-MakeMaker\n```\n\n## 二、卸载默认的git-1.7.1版本\n```\n# yum remove git\n```\n\n## 三、下载git安装包\n在 [这里](https://www.kernel.org/pub/software/scm/git/) 查看并选择git版本\n\n```\n# cd /usr/src\n# wget https://www.kernel.org/pub/software/scm/git/git-2.13.0.tar.gz\n# tar xzf git-2.13.0.tar.gz\n```\n\n## 四、安装git && 添加环境变量\n```\n# cd /usr/src/git-2.13.0\n# make prefix=/usr/local/git all\n# make prefix=/usr/local/git install\n# echo \"export PATH=$PATH:/usr/local/git/bin\" >> /etc/bashrc\n$ source /etc/bashrc\n```\n\n## 五、检验git安装是否成功\n```\n$ git --version\ngit version 2.13.0\n```\n\n","slug":"centos-升级git-2-13-0","published":1,"updated":"2017-05-19T02:08:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjf0000nc00bmykp555","content":"<h2 id=\"一、安装相关工具\"><a href=\"#一、安装相关工具\" class=\"headerlink\" title=\"一、安装相关工具\"></a>一、安装相关工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</div><div class=\"line\"># yum install  gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>\n<h2 id=\"二、卸载默认的git-1-7-1版本\"><a href=\"#二、卸载默认的git-1-7-1版本\" class=\"headerlink\" title=\"二、卸载默认的git-1.7.1版本\"></a>二、卸载默认的git-1.7.1版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum remove git</div></pre></td></tr></table></figure>\n<h2 id=\"三、下载git安装包\"><a href=\"#三、下载git安装包\" class=\"headerlink\" title=\"三、下载git安装包\"></a>三、下载git安装包</h2><p>在 <a href=\"https://www.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"external\">这里</a> 查看并选择git版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd /usr/src</div><div class=\"line\"># wget https://www.kernel.org/pub/software/scm/git/git-2.13.0.tar.gz</div><div class=\"line\"># tar xzf git-2.13.0.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"四、安装git-amp-amp-添加环境变量\"><a href=\"#四、安装git-amp-amp-添加环境变量\" class=\"headerlink\" title=\"四、安装git &amp;&amp; 添加环境变量\"></a>四、安装git &amp;&amp; 添加环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd /usr/src/git-2.13.0</div><div class=\"line\"># make prefix=/usr/local/git all</div><div class=\"line\"># make prefix=/usr/local/git install</div><div class=\"line\"># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</div><div class=\"line\">$ source /etc/bashrc</div></pre></td></tr></table></figure>\n<h2 id=\"五、检验git安装是否成功\"><a href=\"#五、检验git安装是否成功\" class=\"headerlink\" title=\"五、检验git安装是否成功\"></a>五、检验git安装是否成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div><div class=\"line\">git version 2.13.0</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、安装相关工具\"><a href=\"#一、安装相关工具\" class=\"headerlink\" title=\"一、安装相关工具\"></a>一、安装相关工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</div><div class=\"line\"># yum install  gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>\n<h2 id=\"二、卸载默认的git-1-7-1版本\"><a href=\"#二、卸载默认的git-1-7-1版本\" class=\"headerlink\" title=\"二、卸载默认的git-1.7.1版本\"></a>二、卸载默认的git-1.7.1版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum remove git</div></pre></td></tr></table></figure>\n<h2 id=\"三、下载git安装包\"><a href=\"#三、下载git安装包\" class=\"headerlink\" title=\"三、下载git安装包\"></a>三、下载git安装包</h2><p>在 <a href=\"https://www.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"external\">这里</a> 查看并选择git版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd /usr/src</div><div class=\"line\"># wget https://www.kernel.org/pub/software/scm/git/git-2.13.0.tar.gz</div><div class=\"line\"># tar xzf git-2.13.0.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"四、安装git-amp-amp-添加环境变量\"><a href=\"#四、安装git-amp-amp-添加环境变量\" class=\"headerlink\" title=\"四、安装git &amp;&amp; 添加环境变量\"></a>四、安装git &amp;&amp; 添加环境变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd /usr/src/git-2.13.0</div><div class=\"line\"># make prefix=/usr/local/git all</div><div class=\"line\"># make prefix=/usr/local/git install</div><div class=\"line\"># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</div><div class=\"line\">$ source /etc/bashrc</div></pre></td></tr></table></figure>\n<h2 id=\"五、检验git安装是否成功\"><a href=\"#五、检验git安装是否成功\" class=\"headerlink\" title=\"五、检验git安装是否成功\"></a>五、检验git安装是否成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div><div class=\"line\">git version 2.13.0</div></pre></td></tr></table></figure>\n"},{"title":"crontab的一些使用","date":"2017-01-23T08:18:50.000Z","cover":"/img/sea2.png","_content":"## 一、安装\n```\nyum -y install vixie-cron\nyum -y install crontabs\n```\n\nvixie-cron 软件包是 cron 的主程序；\ncrontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\n\n<!--more-->\n\n## 二、配置\n\n需要手动启动crontab，设置开机自动启动\n```\nservice crond start    //启动服务\nservice crond stop    //关闭服务\nservice crond restart    //重启服务\nservice crond reload    //重新载入配置\nservice crond status    //查看crontab服务状态\nchkconfig --level 345 crond on    //centos开机自动启动\n```\n\n## 三、crontab基本操作\n\n```\ncrontab -u    //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数\ncrontab -l    //列出某个用户cron服务的详细内容\ncrontab -r    //删除没个用户的cron服务\ncrontab -e    //编辑某个用户的cron服务\n```\n\n## 四、时程表格式\n```\n时程表格式:\nf1  f2  f3  f4  f5program\n分　 时  日  月　 周　 命令\nf1表示分钟,1～59每分钟用*或者 */1表示\nf2表示小时,1～23（0表示0点）\nf3表示日期即一个月份中的第几日,1～31\nf4表示月份,1～12\nf5标识星期,0～6（0表示星期天）\nf6要执行的程序\n```\n\n## 五、问题排除\n\n如果crontab安装正常、进程正常，脚本没跑起来，排查原因：\n\n#### 1）看log：/var/log/cron\n\n如果找不到/var/log/cron文件，则重启rsyslog：service rsyslog start\n\n#### 2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题\n\n解决办法：把/etc/pam.d/crond文件中的“session    optional   pam_loginuid.so”注释掉，点击参考这里，然后重启crontab即可","source":"_posts/crontab的一些使用.md","raw":"---\ntitle: crontab的一些使用\ndate: 2017-01-23 16:18:50\ntags: [crontab,Linux]\ncover: /img/sea2.png\n---\n## 一、安装\n```\nyum -y install vixie-cron\nyum -y install crontabs\n```\n\nvixie-cron 软件包是 cron 的主程序；\ncrontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\n\n<!--more-->\n\n## 二、配置\n\n需要手动启动crontab，设置开机自动启动\n```\nservice crond start    //启动服务\nservice crond stop    //关闭服务\nservice crond restart    //重启服务\nservice crond reload    //重新载入配置\nservice crond status    //查看crontab服务状态\nchkconfig --level 345 crond on    //centos开机自动启动\n```\n\n## 三、crontab基本操作\n\n```\ncrontab -u    //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数\ncrontab -l    //列出某个用户cron服务的详细内容\ncrontab -r    //删除没个用户的cron服务\ncrontab -e    //编辑某个用户的cron服务\n```\n\n## 四、时程表格式\n```\n时程表格式:\nf1  f2  f3  f4  f5program\n分　 时  日  月　 周　 命令\nf1表示分钟,1～59每分钟用*或者 */1表示\nf2表示小时,1～23（0表示0点）\nf3表示日期即一个月份中的第几日,1～31\nf4表示月份,1～12\nf5标识星期,0～6（0表示星期天）\nf6要执行的程序\n```\n\n## 五、问题排除\n\n如果crontab安装正常、进程正常，脚本没跑起来，排查原因：\n\n#### 1）看log：/var/log/cron\n\n如果找不到/var/log/cron文件，则重启rsyslog：service rsyslog start\n\n#### 2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题\n\n解决办法：把/etc/pam.d/crond文件中的“session    optional   pam_loginuid.so”注释掉，点击参考这里，然后重启crontab即可","slug":"crontab的一些使用","published":1,"updated":"2017-03-27T12:05:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjji0002nc00a115rvvt","content":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install vixie-cron</div><div class=\"line\">yum -y install crontabs</div></pre></td></tr></table></figure>\n<p>vixie-cron 软件包是 cron 的主程序；<br>crontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。</p>\n<a id=\"more\"></a>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>需要手动启动crontab，设置开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">service crond start    //启动服务</div><div class=\"line\">service crond stop    //关闭服务</div><div class=\"line\">service crond restart    //重启服务</div><div class=\"line\">service crond reload    //重新载入配置</div><div class=\"line\">service crond status    //查看crontab服务状态</div><div class=\"line\">chkconfig --level 345 crond on    //centos开机自动启动</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、crontab基本操作\"><a href=\"#三、crontab基本操作\" class=\"headerlink\" title=\"三、crontab基本操作\"></a>三、crontab基本操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab -u    //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</div><div class=\"line\">crontab -l    //列出某个用户cron服务的详细内容</div><div class=\"line\">crontab -r    //删除没个用户的cron服务</div><div class=\"line\">crontab -e    //编辑某个用户的cron服务</div></pre></td></tr></table></figure>\n<h2 id=\"四、时程表格式\"><a href=\"#四、时程表格式\" class=\"headerlink\" title=\"四、时程表格式\"></a>四、时程表格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">时程表格式:</div><div class=\"line\">f1  f2  f3  f4  f5program</div><div class=\"line\">分　 时  日  月　 周　 命令</div><div class=\"line\">f1表示分钟,1～59每分钟用*或者 */1表示</div><div class=\"line\">f2表示小时,1～23（0表示0点）</div><div class=\"line\">f3表示日期即一个月份中的第几日,1～31</div><div class=\"line\">f4表示月份,1～12</div><div class=\"line\">f5标识星期,0～6（0表示星期天）</div><div class=\"line\">f6要执行的程序</div></pre></td></tr></table></figure>\n<h2 id=\"五、问题排除\"><a href=\"#五、问题排除\" class=\"headerlink\" title=\"五、问题排除\"></a>五、问题排除</h2><p>如果crontab安装正常、进程正常，脚本没跑起来，排查原因：</p>\n<h4 id=\"1）看log：-var-log-cron\"><a href=\"#1）看log：-var-log-cron\" class=\"headerlink\" title=\"1）看log：/var/log/cron\"></a>1）看log：/var/log/cron</h4><p>如果找不到/var/log/cron文件，则重启rsyslog：service rsyslog start</p>\n<h4 id=\"2）如果看到-var-log-cron文件报错：FAILED-to-open-PAM-security-session-Cannot-make-remove-an-entry-for-the-specified-session-，则说明是权限问题\"><a href=\"#2）如果看到-var-log-cron文件报错：FAILED-to-open-PAM-security-session-Cannot-make-remove-an-entry-for-the-specified-session-，则说明是权限问题\" class=\"headerlink\" title=\"2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题\"></a>2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题</h4><p>解决办法：把/etc/pam.d/crond文件中的“session    optional   pam_loginuid.so”注释掉，点击参考这里，然后重启crontab即可</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install vixie-cron</div><div class=\"line\">yum -y install crontabs</div></pre></td></tr></table></figure>\n<p>vixie-cron 软件包是 cron 的主程序；<br>crontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。</p>","more":"<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>需要手动启动crontab，设置开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">service crond start    //启动服务</div><div class=\"line\">service crond stop    //关闭服务</div><div class=\"line\">service crond restart    //重启服务</div><div class=\"line\">service crond reload    //重新载入配置</div><div class=\"line\">service crond status    //查看crontab服务状态</div><div class=\"line\">chkconfig --level 345 crond on    //centos开机自动启动</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、crontab基本操作\"><a href=\"#三、crontab基本操作\" class=\"headerlink\" title=\"三、crontab基本操作\"></a>三、crontab基本操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab -u    //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</div><div class=\"line\">crontab -l    //列出某个用户cron服务的详细内容</div><div class=\"line\">crontab -r    //删除没个用户的cron服务</div><div class=\"line\">crontab -e    //编辑某个用户的cron服务</div></pre></td></tr></table></figure>\n<h2 id=\"四、时程表格式\"><a href=\"#四、时程表格式\" class=\"headerlink\" title=\"四、时程表格式\"></a>四、时程表格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">时程表格式:</div><div class=\"line\">f1  f2  f3  f4  f5program</div><div class=\"line\">分　 时  日  月　 周　 命令</div><div class=\"line\">f1表示分钟,1～59每分钟用*或者 */1表示</div><div class=\"line\">f2表示小时,1～23（0表示0点）</div><div class=\"line\">f3表示日期即一个月份中的第几日,1～31</div><div class=\"line\">f4表示月份,1～12</div><div class=\"line\">f5标识星期,0～6（0表示星期天）</div><div class=\"line\">f6要执行的程序</div></pre></td></tr></table></figure>\n<h2 id=\"五、问题排除\"><a href=\"#五、问题排除\" class=\"headerlink\" title=\"五、问题排除\"></a>五、问题排除</h2><p>如果crontab安装正常、进程正常，脚本没跑起来，排查原因：</p>\n<h4 id=\"1）看log：-var-log-cron\"><a href=\"#1）看log：-var-log-cron\" class=\"headerlink\" title=\"1）看log：/var/log/cron\"></a>1）看log：/var/log/cron</h4><p>如果找不到/var/log/cron文件，则重启rsyslog：service rsyslog start</p>\n<h4 id=\"2）如果看到-var-log-cron文件报错：FAILED-to-open-PAM-security-session-Cannot-make-remove-an-entry-for-the-specified-session-，则说明是权限问题\"><a href=\"#2）如果看到-var-log-cron文件报错：FAILED-to-open-PAM-security-session-Cannot-make-remove-an-entry-for-the-specified-session-，则说明是权限问题\" class=\"headerlink\" title=\"2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题\"></a>2）如果看到/var/log/cron文件报错：FAILED to open PAM security session (Cannot make/remove an entry for the specified session)，则说明是权限问题</h4><p>解决办法：把/etc/pam.d/crond文件中的“session    optional   pam_loginuid.so”注释掉，点击参考这里，然后重启crontab即可</p>"},{"title":"php共享内存shmop和shm使用的一些坑","date":"2018-11-20T02:24:11.000Z","cover":null,"_content":"\n最近在接入service mesh时，由于涉及底层接口高访问量的场景，考虑到性能问题需将mesh的地址缓存起来，首先想到了使用共享内存。\n我们知道关于共享内存的操作，php有两套内置扩展函数shmop和sysvshm，一开始我采用了shmop扩展，业务在线上跑了半个多月均无任何异常出现，直到20天之后开始出现一些零星的异常，捕捉到的错误信息如下：\n``` \nPHP Warning 'yii\\base\\ErrorException' with message 'shmop_delete() expects parameter 1 to be long, string given' in test.php \n```\n\n其中写共享内存的php代码实现如下：\n```php\n    public function write($data){\n        $data = pack('a*', $data);\n        shmop_delete($this->shmId);\n        shmop_close($this->shmId);\n        $this->shmId = shmop_open($this->key, 'c', $this->perms, strlen($data));\n        return shmop_write($this->shmId, $data, 0);\n    }\n```\n由于shmop扩展函数在插入、更新、读取等操作均需要自行规划和管理共享内存的存储结构，比如使用shmop开辟一块共享内存并写入内容：\"abcdefghijklmn\"，第二次写入：\"123456\"，则此时共享内存的内容为\"123456ghijklmn\"，第二次的写入并不会清空共享内存已有的内容，所以当初图方便在每次写入时先删掉原来的共享内存块，重新创建一块内存地址并写入新内容，这就为高并发场景下出现以上错误埋下了伏笔。\n原因找到了，于是我想到了改成使用sysvshm那套扩展，具体实现如下：\n```php\n    public function write($varKey, $data){\n        $data = pack('a*', $data);\n        return shm_put_var($this->shmId, $varKey, $data);\n    }\n```\n第二天凌晨，收到了一大波告警，捕捉到的异常信息如下：\n```\nshm_put_var(): not enough shared memory left\n```\n并且php-fpm一直core，于是立马关掉使用共享内存的开关，经过两天的排查，终于在测试环境复现了问题。\n复现方式，通过一个crontab开多个进程同时操作共享内存，一分钟之后，开始出现了同样的错误。于是停止脚本，发现无法通过shm_get_var()来读取共享内存的内容，于是我使用shmop_read读取到的内容如下图所示：\n![shm_put_var错误](/img/shm-error.png)\n写的内容只有：{\"zmq\":{\"host\":\"19.168.1.100\",\"port\":\"8899\",\"createTime\":1542110838}}，但是共享内存里面却是重复的内容，经过分析sysV的接口对于shareKey没有做去重处理，每次都写入了新的key，导致了共享内存的写入指针尽管是相同的shareKey但不断后移，最终导致共享内存被写爆。\n于是在操作共享内存的地方都加上信号锁，经过验证再也不会出现以上问题。代码如下：\n```php\n    public function write($varKey, $data){\n        $data = pack('a*', $data);\n        $signal = sem_get($this->key);\n        sem_acquire($signal);\n        $result = shm_put_var($this->shmId, $varKey, $data);\n        sem_release($signal);\n        return $result;\n    }\n```\n\n补充：\n后来想起了补丁shmop版，其实可以自行进行存储空间管理，再加上信号锁，应该是可以完美解决问题的（以下代码未经过测试）：\n```php\n    public function write($data){\n        $dataLength = strlen($data);\n        $msg = pack('n', $dataLength);\n        $msg .= pack('a', $data);\n        $signal = sem_get($this->key);\n        sem_acquire($signal);\n        $result = shmop_write($this->shmId, $msg, 0);\n        sem_release($signal);\n        return $result;\n    }\n    \n    public function read(){\n        try{\n            $size = shmop_size($this->shmId);\n            $signal = sem_get($this->key);\n            sem_acquire($signal);\n            $shmContent = shmop_read($this->shmId, 0, $size);\n            sem_release($signal);\n            $dataInfo = unpack('n1dataLength', $shmContent);\n            $data = unpack(\"n1dataLength/a{$dataInfo['dataLength']}data\", $shmContent);\n            return $data['data'];\n        }catch(\\Exception $e){\n            return null;\n        }\n    }\n```\n\n最后还是推荐使用sysvshm那套API，比shmop要好用一些。\n\n\n\n感谢：[https://www.jianshu.com/p/a182bc8b3f23](https://www.jianshu.com/p/a182bc8b3f23)\n\n\n\n\n\n","source":"_posts/php共享内存shmop和shm使用的一些坑.md","raw":"---\ntitle: php共享内存shmop和shm使用的一些坑\ndate: 2018-11-20 10:24:11\ncover:\ntags: [共享内存,shmop,shm]\n---\n\n最近在接入service mesh时，由于涉及底层接口高访问量的场景，考虑到性能问题需将mesh的地址缓存起来，首先想到了使用共享内存。\n我们知道关于共享内存的操作，php有两套内置扩展函数shmop和sysvshm，一开始我采用了shmop扩展，业务在线上跑了半个多月均无任何异常出现，直到20天之后开始出现一些零星的异常，捕捉到的错误信息如下：\n``` \nPHP Warning 'yii\\base\\ErrorException' with message 'shmop_delete() expects parameter 1 to be long, string given' in test.php \n```\n\n其中写共享内存的php代码实现如下：\n```php\n    public function write($data){\n        $data = pack('a*', $data);\n        shmop_delete($this->shmId);\n        shmop_close($this->shmId);\n        $this->shmId = shmop_open($this->key, 'c', $this->perms, strlen($data));\n        return shmop_write($this->shmId, $data, 0);\n    }\n```\n由于shmop扩展函数在插入、更新、读取等操作均需要自行规划和管理共享内存的存储结构，比如使用shmop开辟一块共享内存并写入内容：\"abcdefghijklmn\"，第二次写入：\"123456\"，则此时共享内存的内容为\"123456ghijklmn\"，第二次的写入并不会清空共享内存已有的内容，所以当初图方便在每次写入时先删掉原来的共享内存块，重新创建一块内存地址并写入新内容，这就为高并发场景下出现以上错误埋下了伏笔。\n原因找到了，于是我想到了改成使用sysvshm那套扩展，具体实现如下：\n```php\n    public function write($varKey, $data){\n        $data = pack('a*', $data);\n        return shm_put_var($this->shmId, $varKey, $data);\n    }\n```\n第二天凌晨，收到了一大波告警，捕捉到的异常信息如下：\n```\nshm_put_var(): not enough shared memory left\n```\n并且php-fpm一直core，于是立马关掉使用共享内存的开关，经过两天的排查，终于在测试环境复现了问题。\n复现方式，通过一个crontab开多个进程同时操作共享内存，一分钟之后，开始出现了同样的错误。于是停止脚本，发现无法通过shm_get_var()来读取共享内存的内容，于是我使用shmop_read读取到的内容如下图所示：\n![shm_put_var错误](/img/shm-error.png)\n写的内容只有：{\"zmq\":{\"host\":\"19.168.1.100\",\"port\":\"8899\",\"createTime\":1542110838}}，但是共享内存里面却是重复的内容，经过分析sysV的接口对于shareKey没有做去重处理，每次都写入了新的key，导致了共享内存的写入指针尽管是相同的shareKey但不断后移，最终导致共享内存被写爆。\n于是在操作共享内存的地方都加上信号锁，经过验证再也不会出现以上问题。代码如下：\n```php\n    public function write($varKey, $data){\n        $data = pack('a*', $data);\n        $signal = sem_get($this->key);\n        sem_acquire($signal);\n        $result = shm_put_var($this->shmId, $varKey, $data);\n        sem_release($signal);\n        return $result;\n    }\n```\n\n补充：\n后来想起了补丁shmop版，其实可以自行进行存储空间管理，再加上信号锁，应该是可以完美解决问题的（以下代码未经过测试）：\n```php\n    public function write($data){\n        $dataLength = strlen($data);\n        $msg = pack('n', $dataLength);\n        $msg .= pack('a', $data);\n        $signal = sem_get($this->key);\n        sem_acquire($signal);\n        $result = shmop_write($this->shmId, $msg, 0);\n        sem_release($signal);\n        return $result;\n    }\n    \n    public function read(){\n        try{\n            $size = shmop_size($this->shmId);\n            $signal = sem_get($this->key);\n            sem_acquire($signal);\n            $shmContent = shmop_read($this->shmId, 0, $size);\n            sem_release($signal);\n            $dataInfo = unpack('n1dataLength', $shmContent);\n            $data = unpack(\"n1dataLength/a{$dataInfo['dataLength']}data\", $shmContent);\n            return $data['data'];\n        }catch(\\Exception $e){\n            return null;\n        }\n    }\n```\n\n最后还是推荐使用sysvshm那套API，比shmop要好用一些。\n\n\n\n感谢：[https://www.jianshu.com/p/a182bc8b3f23](https://www.jianshu.com/p/a182bc8b3f23)\n\n\n\n\n\n","slug":"php共享内存shmop和shm使用的一些坑","published":1,"updated":"2018-11-20T07:40:40.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjl0005nc00p8bck7do","content":"<p>最近在接入service mesh时，由于涉及底层接口高访问量的场景，考虑到性能问题需将mesh的地址缓存起来，首先想到了使用共享内存。<br>我们知道关于共享内存的操作，php有两套内置扩展函数shmop和sysvshm，一开始我采用了shmop扩展，业务在线上跑了半个多月均无任何异常出现，直到20天之后开始出现一些零星的异常，捕捉到的错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PHP Warning &apos;yii\\base\\ErrorException&apos; with message &apos;shmop_delete() expects parameter 1 to be long, string given&apos; in test.php</div></pre></td></tr></table></figure></p>\n<p>其中写共享内存的php代码实现如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    shmop_delete(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">    shmop_close(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;shmId = shmop_open(<span class=\"keyword\">$this</span>-&gt;key, <span class=\"string\">'c'</span>, <span class=\"keyword\">$this</span>-&gt;perms, strlen($data));</div><div class=\"line\">    <span class=\"keyword\">return</span> shmop_write(<span class=\"keyword\">$this</span>-&gt;shmId, $data, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于shmop扩展函数在插入、更新、读取等操作均需要自行规划和管理共享内存的存储结构，比如使用shmop开辟一块共享内存并写入内容：”abcdefghijklmn”，第二次写入：”123456”，则此时共享内存的内容为”123456ghijklmn”，第二次的写入并不会清空共享内存已有的内容，所以当初图方便在每次写入时先删掉原来的共享内存块，重新创建一块内存地址并写入新内容，这就为高并发场景下出现以上错误埋下了伏笔。<br>原因找到了，于是我想到了改成使用sysvshm那套扩展，具体实现如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($varKey, $data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    <span class=\"keyword\">return</span> shm_put_var(<span class=\"keyword\">$this</span>-&gt;shmId, $varKey, $data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第二天凌晨，收到了一大波告警，捕捉到的异常信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shm_put_var(): not enough shared memory left</div></pre></td></tr></table></figure></p>\n<p>并且php-fpm一直core，于是立马关掉使用共享内存的开关，经过两天的排查，终于在测试环境复现了问题。<br>复现方式，通过一个crontab开多个进程同时操作共享内存，一分钟之后，开始出现了同样的错误。于是停止脚本，发现无法通过shm_get_var()来读取共享内存的内容，于是我使用shmop_read读取到的内容如下图所示：<br><img src=\"/img/shm-error.png\" alt=\"shm_put_var错误\"><br>写的内容只有：{“zmq”:{“host”:”19.168.1.100”,”port”:”8899”,”createTime”:1542110838}}，但是共享内存里面却是重复的内容，经过分析sysV的接口对于shareKey没有做去重处理，每次都写入了新的key，导致了共享内存的写入指针尽管是相同的shareKey但不断后移，最终导致共享内存被写爆。<br>于是在操作共享内存的地方都加上信号锁，经过验证再也不会出现以上问题。代码如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($varKey, $data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">    sem_acquire($signal);</div><div class=\"line\">    $result = shm_put_var(<span class=\"keyword\">$this</span>-&gt;shmId, $varKey, $data);</div><div class=\"line\">    sem_release($signal);</div><div class=\"line\">    <span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>补充：<br>后来想起了补丁shmop版，其实可以自行进行存储空间管理，再加上信号锁，应该是可以完美解决问题的（以下代码未经过测试）：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($data)</span></span>&#123;</div><div class=\"line\">    $dataLength = strlen($data);</div><div class=\"line\">    $msg = pack(<span class=\"string\">'n'</span>, $dataLength);</div><div class=\"line\">    $msg .= pack(<span class=\"string\">'a'</span>, $data);</div><div class=\"line\">    $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">    sem_acquire($signal);</div><div class=\"line\">    $result = shmop_write(<span class=\"keyword\">$this</span>-&gt;shmId, $msg, <span class=\"number\">0</span>);</div><div class=\"line\">    sem_release($signal);</div><div class=\"line\">    <span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        $size = shmop_size(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">        $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">        sem_acquire($signal);</div><div class=\"line\">        $shmContent = shmop_read(<span class=\"keyword\">$this</span>-&gt;shmId, <span class=\"number\">0</span>, $size);</div><div class=\"line\">        sem_release($signal);</div><div class=\"line\">        $dataInfo = unpack(<span class=\"string\">'n1dataLength'</span>, $shmContent);</div><div class=\"line\">        $data = unpack(<span class=\"string\">\"n1dataLength/a&#123;$dataInfo['dataLength']&#125;data\"</span>, $shmContent);</div><div class=\"line\">        <span class=\"keyword\">return</span> $data[<span class=\"string\">'data'</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(\\<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后还是推荐使用sysvshm那套API，比shmop要好用一些。</p>\n<p>感谢：<a href=\"https://www.jianshu.com/p/a182bc8b3f23\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/a182bc8b3f23</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在接入service mesh时，由于涉及底层接口高访问量的场景，考虑到性能问题需将mesh的地址缓存起来，首先想到了使用共享内存。<br>我们知道关于共享内存的操作，php有两套内置扩展函数shmop和sysvshm，一开始我采用了shmop扩展，业务在线上跑了半个多月均无任何异常出现，直到20天之后开始出现一些零星的异常，捕捉到的错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PHP Warning &apos;yii\\base\\ErrorException&apos; with message &apos;shmop_delete() expects parameter 1 to be long, string given&apos; in test.php</div></pre></td></tr></table></figure></p>\n<p>其中写共享内存的php代码实现如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    shmop_delete(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">    shmop_close(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;shmId = shmop_open(<span class=\"keyword\">$this</span>-&gt;key, <span class=\"string\">'c'</span>, <span class=\"keyword\">$this</span>-&gt;perms, strlen($data));</div><div class=\"line\">    <span class=\"keyword\">return</span> shmop_write(<span class=\"keyword\">$this</span>-&gt;shmId, $data, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于shmop扩展函数在插入、更新、读取等操作均需要自行规划和管理共享内存的存储结构，比如使用shmop开辟一块共享内存并写入内容：”abcdefghijklmn”，第二次写入：”123456”，则此时共享内存的内容为”123456ghijklmn”，第二次的写入并不会清空共享内存已有的内容，所以当初图方便在每次写入时先删掉原来的共享内存块，重新创建一块内存地址并写入新内容，这就为高并发场景下出现以上错误埋下了伏笔。<br>原因找到了，于是我想到了改成使用sysvshm那套扩展，具体实现如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($varKey, $data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    <span class=\"keyword\">return</span> shm_put_var(<span class=\"keyword\">$this</span>-&gt;shmId, $varKey, $data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第二天凌晨，收到了一大波告警，捕捉到的异常信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shm_put_var(): not enough shared memory left</div></pre></td></tr></table></figure></p>\n<p>并且php-fpm一直core，于是立马关掉使用共享内存的开关，经过两天的排查，终于在测试环境复现了问题。<br>复现方式，通过一个crontab开多个进程同时操作共享内存，一分钟之后，开始出现了同样的错误。于是停止脚本，发现无法通过shm_get_var()来读取共享内存的内容，于是我使用shmop_read读取到的内容如下图所示：<br><img src=\"/img/shm-error.png\" alt=\"shm_put_var错误\"><br>写的内容只有：{“zmq”:{“host”:”19.168.1.100”,”port”:”8899”,”createTime”:1542110838}}，但是共享内存里面却是重复的内容，经过分析sysV的接口对于shareKey没有做去重处理，每次都写入了新的key，导致了共享内存的写入指针尽管是相同的shareKey但不断后移，最终导致共享内存被写爆。<br>于是在操作共享内存的地方都加上信号锁，经过验证再也不会出现以上问题。代码如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($varKey, $data)</span></span>&#123;</div><div class=\"line\">    $data = pack(<span class=\"string\">'a*'</span>, $data);</div><div class=\"line\">    $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">    sem_acquire($signal);</div><div class=\"line\">    $result = shm_put_var(<span class=\"keyword\">$this</span>-&gt;shmId, $varKey, $data);</div><div class=\"line\">    sem_release($signal);</div><div class=\"line\">    <span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>补充：<br>后来想起了补丁shmop版，其实可以自行进行存储空间管理，再加上信号锁，应该是可以完美解决问题的（以下代码未经过测试）：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span><span class=\"params\">($data)</span></span>&#123;</div><div class=\"line\">    $dataLength = strlen($data);</div><div class=\"line\">    $msg = pack(<span class=\"string\">'n'</span>, $dataLength);</div><div class=\"line\">    $msg .= pack(<span class=\"string\">'a'</span>, $data);</div><div class=\"line\">    $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">    sem_acquire($signal);</div><div class=\"line\">    $result = shmop_write(<span class=\"keyword\">$this</span>-&gt;shmId, $msg, <span class=\"number\">0</span>);</div><div class=\"line\">    sem_release($signal);</div><div class=\"line\">    <span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        $size = shmop_size(<span class=\"keyword\">$this</span>-&gt;shmId);</div><div class=\"line\">        $signal = sem_get(<span class=\"keyword\">$this</span>-&gt;key);</div><div class=\"line\">        sem_acquire($signal);</div><div class=\"line\">        $shmContent = shmop_read(<span class=\"keyword\">$this</span>-&gt;shmId, <span class=\"number\">0</span>, $size);</div><div class=\"line\">        sem_release($signal);</div><div class=\"line\">        $dataInfo = unpack(<span class=\"string\">'n1dataLength'</span>, $shmContent);</div><div class=\"line\">        $data = unpack(<span class=\"string\">\"n1dataLength/a&#123;$dataInfo['dataLength']&#125;data\"</span>, $shmContent);</div><div class=\"line\">        <span class=\"keyword\">return</span> $data[<span class=\"string\">'data'</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(\\<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后还是推荐使用sysvshm那套API，比shmop要好用一些。</p>\n<p>感谢：<a href=\"https://www.jianshu.com/p/a182bc8b3f23\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/a182bc8b3f23</a></p>\n"},{"title":"webstorm上使用sass","date":"2017-01-23T08:00:29.000Z","cover":"/img/sea1.png","_content":"\n\n本文主要介绍一下如何在webstorm上使用sass，实时自动编译sass文件。\n\n## 一、安装\n\n### 1、在翻*墙的情况下：\n\n1）首先要为自己电脑安装ruby\n\n2）执行命令行：\n\n$ gem install sass\n\n<!--more-->\n\n### 2、未翻*墙的情况下：\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n请确保只有ruby.taobao.org\n$ gem install sass\n```\n\n## 二、webstorm参数配置\n\n1）打开webstorm->settings -> tools -> file watchers\n\n2）参数配置\n\n```\nProgram：/usr/local/bin/sass\nArguments：--no-cache --update --style expanded --watch $FileName$:$FileParentDir$\\$FileNameWithoutExtension$.css\nWorking directory：$FileDir$\nOutput paths to refresh：$FileNameWithoutExtension$.css\n```\n\n![webstorm参数配置](/img/webstorm-sass-config.png)\n\n\n\n\n\n## 另外笔者推荐另一种方法：\n\n### 使用compass\n\n1）安装：$ gem install compass\n\n2）编写config.rb文件\n\n```\nrequire 'compass/import-once/activate'\n\\# Require any additional compass plugins here.\n\\# Set this to the root of your project when deployed:\nhttp_path = \"/\"\ncss_dir = \"/pc/style/css\"\nsass_dir = \"/pc/style/sass\"\nimages_dir = \"/pc/style/img\"\njavascripts_dir = \"/pc/js\"\n\\# You can select your preferred output style here (can be overridden via the command line):\n\\# output_style = :expanded or :nested or :compact or :compressed\n\\# To enable relative paths to assets via compass helper functions. Uncomment:\nrelative_assets = true\n\\# To disable debugging comments that display the original location of your selectors. Uncomment:\n\\# line_comments = false\npreferred_syntax = :sass\n```\n\n3）在webstorm的Terminal中输入$ compass watch即可\n\n\n","source":"_posts/webstorm上使用sass.md","raw":"---\ntitle: webstorm上使用sass\ndate: 2017-01-23 16:00:29\ntags: [sass,前端]\ncover: /img/sea1.png\n---\n\n\n本文主要介绍一下如何在webstorm上使用sass，实时自动编译sass文件。\n\n## 一、安装\n\n### 1、在翻*墙的情况下：\n\n1）首先要为自己电脑安装ruby\n\n2）执行命令行：\n\n$ gem install sass\n\n<!--more-->\n\n### 2、未翻*墙的情况下：\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n请确保只有ruby.taobao.org\n$ gem install sass\n```\n\n## 二、webstorm参数配置\n\n1）打开webstorm->settings -> tools -> file watchers\n\n2）参数配置\n\n```\nProgram：/usr/local/bin/sass\nArguments：--no-cache --update --style expanded --watch $FileName$:$FileParentDir$\\$FileNameWithoutExtension$.css\nWorking directory：$FileDir$\nOutput paths to refresh：$FileNameWithoutExtension$.css\n```\n\n![webstorm参数配置](/img/webstorm-sass-config.png)\n\n\n\n\n\n## 另外笔者推荐另一种方法：\n\n### 使用compass\n\n1）安装：$ gem install compass\n\n2）编写config.rb文件\n\n```\nrequire 'compass/import-once/activate'\n\\# Require any additional compass plugins here.\n\\# Set this to the root of your project when deployed:\nhttp_path = \"/\"\ncss_dir = \"/pc/style/css\"\nsass_dir = \"/pc/style/sass\"\nimages_dir = \"/pc/style/img\"\njavascripts_dir = \"/pc/js\"\n\\# You can select your preferred output style here (can be overridden via the command line):\n\\# output_style = :expanded or :nested or :compact or :compressed\n\\# To enable relative paths to assets via compass helper functions. Uncomment:\nrelative_assets = true\n\\# To disable debugging comments that display the original location of your selectors. Uncomment:\n\\# line_comments = false\npreferred_syntax = :sass\n```\n\n3）在webstorm的Terminal中输入$ compass watch即可\n\n\n","slug":"webstorm上使用sass","published":1,"updated":"2017-03-27T12:05:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjm0007nc00ez91w7g8","content":"<p>本文主要介绍一下如何在webstorm上使用sass，实时自动编译sass文件。</p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><h3 id=\"1、在翻-墙的情况下：\"><a href=\"#1、在翻-墙的情况下：\" class=\"headerlink\" title=\"1、在翻*墙的情况下：\"></a>1、在翻*墙的情况下：</h3><p>1）首先要为自己电脑安装ruby</p>\n<p>2）执行命令行：</p>\n<p>$ gem install sass</p>\n<a id=\"more\"></a>\n<h3 id=\"2、未翻-墙的情况下：\"><a href=\"#2、未翻-墙的情况下：\" class=\"headerlink\" title=\"2、未翻*墙的情况下：\"></a>2、未翻*墙的情况下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem sources --remove https://rubygems.org/</div><div class=\"line\">$ gem sources -a https://ruby.taobao.org/</div><div class=\"line\">$ gem sources -l</div><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\">https://ruby.taobao.org</div><div class=\"line\">请确保只有ruby.taobao.org</div><div class=\"line\">$ gem install sass</div></pre></td></tr></table></figure>\n<h2 id=\"二、webstorm参数配置\"><a href=\"#二、webstorm参数配置\" class=\"headerlink\" title=\"二、webstorm参数配置\"></a>二、webstorm参数配置</h2><p>1）打开webstorm-&gt;settings -&gt; tools -&gt; file watchers</p>\n<p>2）参数配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program：/usr/local/bin/sass</div><div class=\"line\">Arguments：--no-cache --update --style expanded --watch $FileName$:$FileParentDir$\\$FileNameWithoutExtension$.css</div><div class=\"line\">Working directory：$FileDir$</div><div class=\"line\">Output paths to refresh：$FileNameWithoutExtension$.css</div></pre></td></tr></table></figure>\n<p><img src=\"/img/webstorm-sass-config.png\" alt=\"webstorm参数配置\"></p>\n<h2 id=\"另外笔者推荐另一种方法：\"><a href=\"#另外笔者推荐另一种方法：\" class=\"headerlink\" title=\"另外笔者推荐另一种方法：\"></a>另外笔者推荐另一种方法：</h2><h3 id=\"使用compass\"><a href=\"#使用compass\" class=\"headerlink\" title=\"使用compass\"></a>使用compass</h3><p>1）安装：$ gem install compass</p>\n<p>2）编写config.rb文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">require &apos;compass/import-once/activate&apos;</div><div class=\"line\">\\# Require any additional compass plugins here.</div><div class=\"line\">\\# Set this to the root of your project when deployed:</div><div class=\"line\">http_path = &quot;/&quot;</div><div class=\"line\">css_dir = &quot;/pc/style/css&quot;</div><div class=\"line\">sass_dir = &quot;/pc/style/sass&quot;</div><div class=\"line\">images_dir = &quot;/pc/style/img&quot;</div><div class=\"line\">javascripts_dir = &quot;/pc/js&quot;</div><div class=\"line\">\\# You can select your preferred output style here (can be overridden via the command line):</div><div class=\"line\">\\# output_style = :expanded or :nested or :compact or :compressed</div><div class=\"line\">\\# To enable relative paths to assets via compass helper functions. Uncomment:</div><div class=\"line\">relative_assets = true</div><div class=\"line\">\\# To disable debugging comments that display the original location of your selectors. Uncomment:</div><div class=\"line\">\\# line_comments = false</div><div class=\"line\">preferred_syntax = :sass</div></pre></td></tr></table></figure>\n<p>3）在webstorm的Terminal中输入$ compass watch即可</p>\n","site":{"data":{}},"excerpt":"<p>本文主要介绍一下如何在webstorm上使用sass，实时自动编译sass文件。</p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><h3 id=\"1、在翻-墙的情况下：\"><a href=\"#1、在翻-墙的情况下：\" class=\"headerlink\" title=\"1、在翻*墙的情况下：\"></a>1、在翻*墙的情况下：</h3><p>1）首先要为自己电脑安装ruby</p>\n<p>2）执行命令行：</p>\n<p>$ gem install sass</p>","more":"<h3 id=\"2、未翻-墙的情况下：\"><a href=\"#2、未翻-墙的情况下：\" class=\"headerlink\" title=\"2、未翻*墙的情况下：\"></a>2、未翻*墙的情况下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem sources --remove https://rubygems.org/</div><div class=\"line\">$ gem sources -a https://ruby.taobao.org/</div><div class=\"line\">$ gem sources -l</div><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\">https://ruby.taobao.org</div><div class=\"line\">请确保只有ruby.taobao.org</div><div class=\"line\">$ gem install sass</div></pre></td></tr></table></figure>\n<h2 id=\"二、webstorm参数配置\"><a href=\"#二、webstorm参数配置\" class=\"headerlink\" title=\"二、webstorm参数配置\"></a>二、webstorm参数配置</h2><p>1）打开webstorm-&gt;settings -&gt; tools -&gt; file watchers</p>\n<p>2）参数配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program：/usr/local/bin/sass</div><div class=\"line\">Arguments：--no-cache --update --style expanded --watch $FileName$:$FileParentDir$\\$FileNameWithoutExtension$.css</div><div class=\"line\">Working directory：$FileDir$</div><div class=\"line\">Output paths to refresh：$FileNameWithoutExtension$.css</div></pre></td></tr></table></figure>\n<p><img src=\"/img/webstorm-sass-config.png\" alt=\"webstorm参数配置\"></p>\n<h2 id=\"另外笔者推荐另一种方法：\"><a href=\"#另外笔者推荐另一种方法：\" class=\"headerlink\" title=\"另外笔者推荐另一种方法：\"></a>另外笔者推荐另一种方法：</h2><h3 id=\"使用compass\"><a href=\"#使用compass\" class=\"headerlink\" title=\"使用compass\"></a>使用compass</h3><p>1）安装：$ gem install compass</p>\n<p>2）编写config.rb文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">require &apos;compass/import-once/activate&apos;</div><div class=\"line\">\\# Require any additional compass plugins here.</div><div class=\"line\">\\# Set this to the root of your project when deployed:</div><div class=\"line\">http_path = &quot;/&quot;</div><div class=\"line\">css_dir = &quot;/pc/style/css&quot;</div><div class=\"line\">sass_dir = &quot;/pc/style/sass&quot;</div><div class=\"line\">images_dir = &quot;/pc/style/img&quot;</div><div class=\"line\">javascripts_dir = &quot;/pc/js&quot;</div><div class=\"line\">\\# You can select your preferred output style here (can be overridden via the command line):</div><div class=\"line\">\\# output_style = :expanded or :nested or :compact or :compressed</div><div class=\"line\">\\# To enable relative paths to assets via compass helper functions. Uncomment:</div><div class=\"line\">relative_assets = true</div><div class=\"line\">\\# To disable debugging comments that display the original location of your selectors. Uncomment:</div><div class=\"line\">\\# line_comments = false</div><div class=\"line\">preferred_syntax = :sass</div></pre></td></tr></table></figure>\n<p>3）在webstorm的Terminal中输入$ compass watch即可</p>"},{"title":"XX-net的配置笔记","date":"2017-02-24T09:04:34.000Z","cover":null,"_content":"\n\n昨晚[全球最大的同性交友网站 Github 上不去了](https://www.v2ex.com/t/342757#reply46)！\n\n感觉我们就像是在一个庞大的局域网中不亦乐乎地生活着，作为对科学技术有浓厚兴趣的每一位朋友来讲，学会科学合法上网非常有必要。\n\n今天笔者将记录一种科学上网的一种方法（仅介绍Mac下），方便自己日后再次使用。如果能给大家带来微小的帮助的话，我也很开心。\n\n#### 1、首先下载xx-net源码\n```\n$ cd ~\n$ git clone https://github.com/XX-net/XX-Net.git\n```\n\n源项目详见：[xx-net](https://github.com/XX-net/XX-Net)\n\n#### 2、安装chrome SwitchyOmega扩展\n在以下文章中，我有介绍过安装SwitchyOmega扩展的方法：\n[SwitchyOmega安装](http://victorquan.com/2017/02/22/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84MAC/)\n\n```\n$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx\n```\n\n#### 3、启动xx-net\n```\n$ ~/XX-net/start\n```\n\n如果你不想使用XX-net自带的公共appid的话，那么需要按照以下方法申请自己的appid\n\n#### 4、登录google账户\n进入[https://www.google.com/ncr](https://www.google.com/ncr)\n\n\n#### 5、创建appid\n点击页面右上角“project”->“创建项目”，输入“项目名称”之后自动为你生成了一个appid，把它记下来。\n\n![创建appid](/img/xx-net/createPrj.png)\n\n\n#### 6、设置appid引擎\n进入[https://console.cloud.google.com/start](https://console.cloud.google.com/start)\n\n点击激活云端shell，如下图所示\n\n![激活shell](/img/xx-net/shell.png)\n\n等激活云端shell之后，输入以下命令：\n\n```\n$ gcloud config set project 刚才记下来的appid\n$ gcloud beta app create --region us-central\n```\n\n当显示success之后表示已设置成功\n\n反复操作5、6步骤可以重复创建多个appid，最多可以创建12个。\n\n#### 7、部署服务端配置\n\n- 1）打开设置页：[http://127.0.0.1:8085/](http://127.0.0.1:8085/)\n\n- 2）如下图输入appid，点击“开始部署”\n\n![部署服务端](/img/xx-net/deploySetting.png)\n\n- 3）配置GAEProxy\n\n![配置GAEProxy](/img/xx-net/config.png)\n\n- 4）确认状态\n\n![确认状态](/img/xx-net/status.png)\n\n- 5）done\n\n\n\n\n\n\n","source":"_posts/xx-net的配置笔记.md","raw":"---\ntitle: XX-net的配置笔记\ndate: 2017-02-24 17:04:34\ncover:\ntags: [xx-net,Internet]\n---\n\n\n昨晚[全球最大的同性交友网站 Github 上不去了](https://www.v2ex.com/t/342757#reply46)！\n\n感觉我们就像是在一个庞大的局域网中不亦乐乎地生活着，作为对科学技术有浓厚兴趣的每一位朋友来讲，学会科学合法上网非常有必要。\n\n今天笔者将记录一种科学上网的一种方法（仅介绍Mac下），方便自己日后再次使用。如果能给大家带来微小的帮助的话，我也很开心。\n\n#### 1、首先下载xx-net源码\n```\n$ cd ~\n$ git clone https://github.com/XX-net/XX-Net.git\n```\n\n源项目详见：[xx-net](https://github.com/XX-net/XX-Net)\n\n#### 2、安装chrome SwitchyOmega扩展\n在以下文章中，我有介绍过安装SwitchyOmega扩展的方法：\n[SwitchyOmega安装](http://victorquan.com/2017/02/22/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84MAC/)\n\n```\n$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx\n```\n\n#### 3、启动xx-net\n```\n$ ~/XX-net/start\n```\n\n如果你不想使用XX-net自带的公共appid的话，那么需要按照以下方法申请自己的appid\n\n#### 4、登录google账户\n进入[https://www.google.com/ncr](https://www.google.com/ncr)\n\n\n#### 5、创建appid\n点击页面右上角“project”->“创建项目”，输入“项目名称”之后自动为你生成了一个appid，把它记下来。\n\n![创建appid](/img/xx-net/createPrj.png)\n\n\n#### 6、设置appid引擎\n进入[https://console.cloud.google.com/start](https://console.cloud.google.com/start)\n\n点击激活云端shell，如下图所示\n\n![激活shell](/img/xx-net/shell.png)\n\n等激活云端shell之后，输入以下命令：\n\n```\n$ gcloud config set project 刚才记下来的appid\n$ gcloud beta app create --region us-central\n```\n\n当显示success之后表示已设置成功\n\n反复操作5、6步骤可以重复创建多个appid，最多可以创建12个。\n\n#### 7、部署服务端配置\n\n- 1）打开设置页：[http://127.0.0.1:8085/](http://127.0.0.1:8085/)\n\n- 2）如下图输入appid，点击“开始部署”\n\n![部署服务端](/img/xx-net/deploySetting.png)\n\n- 3）配置GAEProxy\n\n![配置GAEProxy](/img/xx-net/config.png)\n\n- 4）确认状态\n\n![确认状态](/img/xx-net/status.png)\n\n- 5）done\n\n\n\n\n\n\n","slug":"xx-net的配置笔记","published":1,"updated":"2017-02-24T12:27:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjo0008nc00lgae89s2","content":"<p>昨晚<a href=\"https://www.v2ex.com/t/342757#reply46\" target=\"_blank\" rel=\"external\">全球最大的同性交友网站 Github 上不去了</a>！</p>\n<p>感觉我们就像是在一个庞大的局域网中不亦乐乎地生活着，作为对科学技术有浓厚兴趣的每一位朋友来讲，学会科学合法上网非常有必要。</p>\n<p>今天笔者将记录一种科学上网的一种方法（仅介绍Mac下），方便自己日后再次使用。如果能给大家带来微小的帮助的话，我也很开心。</p>\n<h4 id=\"1、首先下载xx-net源码\"><a href=\"#1、首先下载xx-net源码\" class=\"headerlink\" title=\"1、首先下载xx-net源码\"></a>1、首先下载xx-net源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ git clone https://github.com/XX-net/XX-Net.git</div></pre></td></tr></table></figure>\n<p>源项目详见：<a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"external\">xx-net</a></p>\n<h4 id=\"2、安装chrome-SwitchyOmega扩展\"><a href=\"#2、安装chrome-SwitchyOmega扩展\" class=\"headerlink\" title=\"2、安装chrome SwitchyOmega扩展\"></a>2、安装chrome SwitchyOmega扩展</h4><p>在以下文章中，我有介绍过安装SwitchyOmega扩展的方法：<br><a href=\"http://victorquan.com/2017/02/22/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84MAC/\" target=\"_blank\" rel=\"external\">SwitchyOmega安装</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx</div></pre></td></tr></table></figure>\n<h4 id=\"3、启动xx-net\"><a href=\"#3、启动xx-net\" class=\"headerlink\" title=\"3、启动xx-net\"></a>3、启动xx-net</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ~/XX-net/start</div></pre></td></tr></table></figure>\n<p>如果你不想使用XX-net自带的公共appid的话，那么需要按照以下方法申请自己的appid</p>\n<h4 id=\"4、登录google账户\"><a href=\"#4、登录google账户\" class=\"headerlink\" title=\"4、登录google账户\"></a>4、登录google账户</h4><p>进入<a href=\"https://www.google.com/ncr\" target=\"_blank\" rel=\"external\">https://www.google.com/ncr</a></p>\n<h4 id=\"5、创建appid\"><a href=\"#5、创建appid\" class=\"headerlink\" title=\"5、创建appid\"></a>5、创建appid</h4><p>点击页面右上角“project”-&gt;“创建项目”，输入“项目名称”之后自动为你生成了一个appid，把它记下来。</p>\n<p><img src=\"/img/xx-net/createPrj.png\" alt=\"创建appid\"></p>\n<h4 id=\"6、设置appid引擎\"><a href=\"#6、设置appid引擎\" class=\"headerlink\" title=\"6、设置appid引擎\"></a>6、设置appid引擎</h4><p>进入<a href=\"https://console.cloud.google.com/start\" target=\"_blank\" rel=\"external\">https://console.cloud.google.com/start</a></p>\n<p>点击激活云端shell，如下图所示</p>\n<p><img src=\"/img/xx-net/shell.png\" alt=\"激活shell\"></p>\n<p>等激活云端shell之后，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcloud config set project 刚才记下来的appid</div><div class=\"line\">$ gcloud beta app create --region us-central</div></pre></td></tr></table></figure>\n<p>当显示success之后表示已设置成功</p>\n<p>反复操作5、6步骤可以重复创建多个appid，最多可以创建12个。</p>\n<h4 id=\"7、部署服务端配置\"><a href=\"#7、部署服务端配置\" class=\"headerlink\" title=\"7、部署服务端配置\"></a>7、部署服务端配置</h4><ul>\n<li><p>1）打开设置页：<a href=\"http://127.0.0.1:8085/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8085/</a></p>\n</li>\n<li><p>2）如下图输入appid，点击“开始部署”</p>\n</li>\n</ul>\n<p><img src=\"/img/xx-net/deploySetting.png\" alt=\"部署服务端\"></p>\n<ul>\n<li>3）配置GAEProxy</li>\n</ul>\n<p><img src=\"/img/xx-net/config.png\" alt=\"配置GAEProxy\"></p>\n<ul>\n<li>4）确认状态</li>\n</ul>\n<p><img src=\"/img/xx-net/status.png\" alt=\"确认状态\"></p>\n<ul>\n<li>5）done</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>昨晚<a href=\"https://www.v2ex.com/t/342757#reply46\" target=\"_blank\" rel=\"external\">全球最大的同性交友网站 Github 上不去了</a>！</p>\n<p>感觉我们就像是在一个庞大的局域网中不亦乐乎地生活着，作为对科学技术有浓厚兴趣的每一位朋友来讲，学会科学合法上网非常有必要。</p>\n<p>今天笔者将记录一种科学上网的一种方法（仅介绍Mac下），方便自己日后再次使用。如果能给大家带来微小的帮助的话，我也很开心。</p>\n<h4 id=\"1、首先下载xx-net源码\"><a href=\"#1、首先下载xx-net源码\" class=\"headerlink\" title=\"1、首先下载xx-net源码\"></a>1、首先下载xx-net源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ git clone https://github.com/XX-net/XX-Net.git</div></pre></td></tr></table></figure>\n<p>源项目详见：<a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"external\">xx-net</a></p>\n<h4 id=\"2、安装chrome-SwitchyOmega扩展\"><a href=\"#2、安装chrome-SwitchyOmega扩展\" class=\"headerlink\" title=\"2、安装chrome SwitchyOmega扩展\"></a>2、安装chrome SwitchyOmega扩展</h4><p>在以下文章中，我有介绍过安装SwitchyOmega扩展的方法：<br><a href=\"http://victorquan.com/2017/02/22/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84MAC/\" target=\"_blank\" rel=\"external\">SwitchyOmega安装</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx</div></pre></td></tr></table></figure>\n<h4 id=\"3、启动xx-net\"><a href=\"#3、启动xx-net\" class=\"headerlink\" title=\"3、启动xx-net\"></a>3、启动xx-net</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ~/XX-net/start</div></pre></td></tr></table></figure>\n<p>如果你不想使用XX-net自带的公共appid的话，那么需要按照以下方法申请自己的appid</p>\n<h4 id=\"4、登录google账户\"><a href=\"#4、登录google账户\" class=\"headerlink\" title=\"4、登录google账户\"></a>4、登录google账户</h4><p>进入<a href=\"https://www.google.com/ncr\" target=\"_blank\" rel=\"external\">https://www.google.com/ncr</a></p>\n<h4 id=\"5、创建appid\"><a href=\"#5、创建appid\" class=\"headerlink\" title=\"5、创建appid\"></a>5、创建appid</h4><p>点击页面右上角“project”-&gt;“创建项目”，输入“项目名称”之后自动为你生成了一个appid，把它记下来。</p>\n<p><img src=\"/img/xx-net/createPrj.png\" alt=\"创建appid\"></p>\n<h4 id=\"6、设置appid引擎\"><a href=\"#6、设置appid引擎\" class=\"headerlink\" title=\"6、设置appid引擎\"></a>6、设置appid引擎</h4><p>进入<a href=\"https://console.cloud.google.com/start\" target=\"_blank\" rel=\"external\">https://console.cloud.google.com/start</a></p>\n<p>点击激活云端shell，如下图所示</p>\n<p><img src=\"/img/xx-net/shell.png\" alt=\"激活shell\"></p>\n<p>等激活云端shell之后，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcloud config set project 刚才记下来的appid</div><div class=\"line\">$ gcloud beta app create --region us-central</div></pre></td></tr></table></figure>\n<p>当显示success之后表示已设置成功</p>\n<p>反复操作5、6步骤可以重复创建多个appid，最多可以创建12个。</p>\n<h4 id=\"7、部署服务端配置\"><a href=\"#7、部署服务端配置\" class=\"headerlink\" title=\"7、部署服务端配置\"></a>7、部署服务端配置</h4><ul>\n<li><p>1）打开设置页：<a href=\"http://127.0.0.1:8085/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8085/</a></p>\n</li>\n<li><p>2）如下图输入appid，点击“开始部署”</p>\n</li>\n</ul>\n<p><img src=\"/img/xx-net/deploySetting.png\" alt=\"部署服务端\"></p>\n<ul>\n<li>3）配置GAEProxy</li>\n</ul>\n<p><img src=\"/img/xx-net/config.png\" alt=\"配置GAEProxy\"></p>\n<ul>\n<li>4）确认状态</li>\n</ul>\n<p><img src=\"/img/xx-net/status.png\" alt=\"确认状态\"></p>\n<ul>\n<li>5）done</li>\n</ul>\n"},{"title":"nvm快速安装node","date":"2017-02-21T03:01:04.000Z","_content":"\n### 安装nvm：\n```\ngit clone https://github.com/creationix/nvm.git .nvm\n```\n\n### 配置环境变量：\n```\nsource ~/.nvm/nvm.sh\n```\n\n### 永久配置淘宝源：\n```\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n```\n\n<!--more-->\n\n### 安装node：\n```\nnvm install v6.9.5\n```\n\n### 默认使用node指定版本\n```\nnvm use v6.9.5\nnvm alias default v6.9.5\n```\n\n### 验证\n```\nnvm ls\n```\n\n\n","source":"_posts/快速安装node笔记.md","raw":"---\ntitle: nvm快速安装node\ndate: 2017-02-21 11:01:04\ntags: [node,nvm]\n---\n\n### 安装nvm：\n```\ngit clone https://github.com/creationix/nvm.git .nvm\n```\n\n### 配置环境变量：\n```\nsource ~/.nvm/nvm.sh\n```\n\n### 永久配置淘宝源：\n```\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n```\n\n<!--more-->\n\n### 安装node：\n```\nnvm install v6.9.5\n```\n\n### 默认使用node指定版本\n```\nnvm use v6.9.5\nnvm alias default v6.9.5\n```\n\n### 验证\n```\nnvm ls\n```\n\n\n","slug":"快速安装node笔记","published":1,"updated":"2017-04-06T06:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjp000bnc00vkaoainr","content":"<h3 id=\"安装nvm：\"><a href=\"#安装nvm：\" class=\"headerlink\" title=\"安装nvm：\"></a>安装nvm：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/creationix/nvm.git .nvm</div></pre></td></tr></table></figure>\n<h3 id=\"配置环境变量：\"><a href=\"#配置环境变量：\" class=\"headerlink\" title=\"配置环境变量：\"></a>配置环境变量：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>\n<h3 id=\"永久配置淘宝源：\"><a href=\"#永久配置淘宝源：\" class=\"headerlink\" title=\"永久配置淘宝源：\"></a>永久配置淘宝源：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"安装node：\"><a href=\"#安装node：\" class=\"headerlink\" title=\"安装node：\"></a>安装node：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install v6.9.5</div></pre></td></tr></table></figure>\n<h3 id=\"默认使用node指定版本\"><a href=\"#默认使用node指定版本\" class=\"headerlink\" title=\"默认使用node指定版本\"></a>默认使用node指定版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use v6.9.5</div><div class=\"line\">nvm alias default v6.9.5</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装nvm：\"><a href=\"#安装nvm：\" class=\"headerlink\" title=\"安装nvm：\"></a>安装nvm：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/creationix/nvm.git .nvm</div></pre></td></tr></table></figure>\n<h3 id=\"配置环境变量：\"><a href=\"#配置环境变量：\" class=\"headerlink\" title=\"配置环境变量：\"></a>配置环境变量：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>\n<h3 id=\"永久配置淘宝源：\"><a href=\"#永久配置淘宝源：\" class=\"headerlink\" title=\"永久配置淘宝源：\"></a>永久配置淘宝源：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</div></pre></td></tr></table></figure>","more":"<h3 id=\"安装node：\"><a href=\"#安装node：\" class=\"headerlink\" title=\"安装node：\"></a>安装node：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install v6.9.5</div></pre></td></tr></table></figure>\n<h3 id=\"默认使用node指定版本\"><a href=\"#默认使用node指定版本\" class=\"headerlink\" title=\"默认使用node指定版本\"></a>默认使用node指定版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use v6.9.5</div><div class=\"line\">nvm alias default v6.9.5</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls</div></pre></td></tr></table></figure>"},{"title":"让git忽略ssl证书错误","date":"2017-01-23T08:21:21.000Z","_content":"\n当你通过HTTPS访问Git远程仓库，如果服务器的SSL证书未经过第三方机构签署，那么Git就会报错。这是十分合理的设计，毕竟未知的没有签署过的证书意味着很大安全风险。但是，如果你正好在架设Git服务器，而正式的SSL证书没有签发下来，你为了赶时间生成了自签署的临时证书，怎样才是最便捷的测试手段。\n\n<!--more-->\n\n一种比较好的做法：\n\n### 第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为\"ture\"，并同时调用正常的git clone命令。完整的命令如下：\n```\nenv GIT_SSL_NO_VERIFY=true git clone https://<host_name/git/project.git\n```\n\n### 第二步，在克隆完毕的仓库中将http.sslVerify设置为\"false\"。完整的命令如下：\n```\ngit config http.sslVerify\"false\"\n```\n\n以上方法应该是Git处理可信任的SSL临时证书很好的方法，第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置。第二次，则把忽略证书错误的设置限定在特定的仓库，避免扩大该设置的适用范围而引起的潜在安全风险。\n\n或者直接就使用命令：\n```\ngit config --global http.sslVerifyfalse\n```\n\n","source":"_posts/让git忽略ssl证书错误.md","raw":"---\ntitle: 让git忽略ssl证书错误\ndate: 2017-01-23 16:21:21\ntags: [git,版本控制]\n---\n\n当你通过HTTPS访问Git远程仓库，如果服务器的SSL证书未经过第三方机构签署，那么Git就会报错。这是十分合理的设计，毕竟未知的没有签署过的证书意味着很大安全风险。但是，如果你正好在架设Git服务器，而正式的SSL证书没有签发下来，你为了赶时间生成了自签署的临时证书，怎样才是最便捷的测试手段。\n\n<!--more-->\n\n一种比较好的做法：\n\n### 第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为\"ture\"，并同时调用正常的git clone命令。完整的命令如下：\n```\nenv GIT_SSL_NO_VERIFY=true git clone https://<host_name/git/project.git\n```\n\n### 第二步，在克隆完毕的仓库中将http.sslVerify设置为\"false\"。完整的命令如下：\n```\ngit config http.sslVerify\"false\"\n```\n\n以上方法应该是Git处理可信任的SSL临时证书很好的方法，第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置。第二次，则把忽略证书错误的设置限定在特定的仓库，避免扩大该设置的适用范围而引起的潜在安全风险。\n\n或者直接就使用命令：\n```\ngit config --global http.sslVerifyfalse\n```\n\n","slug":"让git忽略ssl证书错误","published":1,"updated":"2017-02-24T02:30:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjr000cnc00238wyn7q","content":"<p>当你通过HTTPS访问Git远程仓库，如果服务器的SSL证书未经过第三方机构签署，那么Git就会报错。这是十分合理的设计，毕竟未知的没有签署过的证书意味着很大安全风险。但是，如果你正好在架设Git服务器，而正式的SSL证书没有签发下来，你为了赶时间生成了自签署的临时证书，怎样才是最便捷的测试手段。</p>\n<a id=\"more\"></a>\n<p>一种比较好的做法：</p>\n<h3 id=\"第一步，克隆远程仓库时，用env命令设置GIT-SSL-NO-VERIFY环境变量为”ture”，并同时调用正常的git-clone命令。完整的命令如下：\"><a href=\"#第一步，克隆远程仓库时，用env命令设置GIT-SSL-NO-VERIFY环境变量为”ture”，并同时调用正常的git-clone命令。完整的命令如下：\" class=\"headerlink\" title=\"第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下：\"></a>第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">env GIT_SSL_NO_VERIFY=true git clone https://&lt;host_name/git/project.git</div></pre></td></tr></table></figure>\n<h3 id=\"第二步，在克隆完毕的仓库中将http-sslVerify设置为”false”。完整的命令如下：\"><a href=\"#第二步，在克隆完毕的仓库中将http-sslVerify设置为”false”。完整的命令如下：\" class=\"headerlink\" title=\"第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下：\"></a>第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config http.sslVerify&quot;false&quot;</div></pre></td></tr></table></figure>\n<p>以上方法应该是Git处理可信任的SSL临时证书很好的方法，第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置。第二次，则把忽略证书错误的设置限定在特定的仓库，避免扩大该设置的适用范围而引起的潜在安全风险。</p>\n<p>或者直接就使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.sslVerifyfalse</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>当你通过HTTPS访问Git远程仓库，如果服务器的SSL证书未经过第三方机构签署，那么Git就会报错。这是十分合理的设计，毕竟未知的没有签署过的证书意味着很大安全风险。但是，如果你正好在架设Git服务器，而正式的SSL证书没有签发下来，你为了赶时间生成了自签署的临时证书，怎样才是最便捷的测试手段。</p>","more":"<p>一种比较好的做法：</p>\n<h3 id=\"第一步，克隆远程仓库时，用env命令设置GIT-SSL-NO-VERIFY环境变量为”ture”，并同时调用正常的git-clone命令。完整的命令如下：\"><a href=\"#第一步，克隆远程仓库时，用env命令设置GIT-SSL-NO-VERIFY环境变量为”ture”，并同时调用正常的git-clone命令。完整的命令如下：\" class=\"headerlink\" title=\"第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下：\"></a>第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">env GIT_SSL_NO_VERIFY=true git clone https://&lt;host_name/git/project.git</div></pre></td></tr></table></figure>\n<h3 id=\"第二步，在克隆完毕的仓库中将http-sslVerify设置为”false”。完整的命令如下：\"><a href=\"#第二步，在克隆完毕的仓库中将http-sslVerify设置为”false”。完整的命令如下：\" class=\"headerlink\" title=\"第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下：\"></a>第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config http.sslVerify&quot;false&quot;</div></pre></td></tr></table></figure>\n<p>以上方法应该是Git处理可信任的SSL临时证书很好的方法，第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置。第二次，则把忽略证书错误的设置限定在特定的仓库，避免扩大该设置的适用范围而引起的潜在安全风险。</p>\n<p>或者直接就使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.sslVerifyfalse</div></pre></td></tr></table></figure></p>"},{"title":"配置自己的MAC","date":"2017-02-22T05:10:42.000Z","_content":"\n\n### 一、安装 brew 工具\n```\n$ curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1\n```\n\n### 二、安装 Solarized 配色工具\n\nSolarized是目前最完整的Terminal/Editor/IDE配色项目，要在 Mac OS X 终端里舒服的使用命令行（至少）需要给3个工具配色，terminal、vim 和 ls。这里不得不提和Terminal相同功能的工具iTerm2。\n\n\n#### 1、下载 Solarized：\n```\n$ git clone git://github.com/altercation/solarized.git\n```\n\n#### 2、配色方案 Solarized 导入\n    \nMac OS X 自带的 Terminal 和免费的 iTerm2 都是很好用的工具，iTerm2 可以切分成多窗口，更方便一些。\n\n如果你使用的是 Terminal，在solarized/osx-terminal.app-colors-solarized 下双击 Solarized Dark ansi.terminal 和 Solarized Light ansi.terminal 就会自动导入两种配色方案 Dark 和 Light 到 Terminal.app 里。\n\n如果你使用的是 iTerm2 的话，到 solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm 里。\n\n#### 3、vim的配色最好和终端一致\n```    \n$ cd solarized\n$ cd vim-colors-solarized/colors\n$ mkdir -p ~/.vim/colors\n$ cp solarized.vim ~/.vim/colors/\n$ vi ~/.vimrc 添加以下代码\n\tsyntax on\n\tset background=dark\n\tcolorscheme solarized\n```\n    \n#### 4、ls\nMacOSX是基于FreeBSD的，所以一些工具ls，top等都是BSD那一套，ls不是GNU ls，所以即使 Terminal / iTerm2 配置了颜色，但是在Mac上敲入ls命令也不会显示高亮，可以通过安装coreutils来解决（brew install coreutils），不过如果对ls颜色不挑剔的话有个简单办法就是在 .bash_profile 里输出 CLICOLOR=1：\n\n```\n$ vi ~/.bash_profile\n\texport CLICOLOR=1\n```\n\n#### 5、ls高亮设置\n```   \n$ sudo brew install xz coreutils\n$ gdircolors --print-database > ~/.dir_colors\n$ vim ~/.bash_profile 添加以下代码\n\tif brew list | grep coreutils > /dev/null ; then\n\t\tPATH=\"$(brew --prefix coreutils)/libexec/gnubin:$PATH\"\n\t\talias ls='ls -F --show-control-chars --color=auto'\n\t\teval `gdircolors -b $HOME/.dir_colors`\n\tfi\n```\n\n#### 6、grep高亮设置\n```\n$ vim ~/.bash_profile 添加以下代码\n\talias grep='grep --color'\n\talias egrep='egrep --color'\n\talias fgrep='fgrep --color'\n```\n\n### 三、增强命令行工具\n添加ll、l、la指令\n\n```\n$ vim ~/.bash_profile 添加以下代码\n    alias ll='ls -alF'\n    alias la='ls -A'\n    alias l='ls -CF'\n```\n\n\n### 四、补充\n也可以玩一下 Terminal + Tmux、zsh + oh-my-zsh + powerline 一套。\nwindows下的 [babun](http://babun.github.io/) 也不错\n\n\n### 五、安装homebrew、solarized\n[homebrew & solarized](https://github.com/victorquan/Mac-Terminal-and-Vim-configuration)\n\n### 六、安装whistle代理工具\n[whistle github 源码](https://github.com/avwo/whistle) \n\n#### 1、安装node（npm）\n[详见快速安装node](http://victorquan.com/2017/02/21/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85node%E7%AC%94%E8%AE%B0/)\n\n\n#### 2、安装whistle\n```\n$ sudo npm install -g whistle\n```\n\n\n#### 3、安装chrome的switch插件\n```\n$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx\n```\n\n\n#### 4、SwitchOmega 配置参数\n```\n127.0.0.1:8899\n```\n\n\n#### 5、启动whistle\n```\n$ sudo whistle start\n```\n\n\n### 七、安装markdown转成ppt插件landslide\n[参考landslide](https://github.com/adamzap/landslide)\n\n如果你还未安装pip，见 [https://pip.pypa.io/en/latest/installing/](https://pip.pypa.io/en/latest/installing/)\n使用方法\n\n```\n$ landslide test.md -i -o > test.html\n```\n\n### 八、安装php composer\n#### 1、安装方法\n方法一，使用curl安装: \n\n```\n$ curl -sS https://getcomposer.org/installer | php\n```\n\n方法二，若没有安装curl，可以通过另外一种方式安装: \n\n```\n$ php -r \"readfile('https://getcomposer.org/installer');\" | php\n```\n\n方法三，手动下载:\n\n[Download Composer](https://getcomposer.org/composer.phar)\n    \n#### 2、将下载好的composer.phar移动到bin中成为全域指令\n```\n$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n#### 3、修改权限\n```\n$ sudo chmod a+x composer\n```\n\n\n\n","source":"_posts/配置自己的MAC.md","raw":"---\ntitle: 配置自己的MAC\ndate: 2017-02-22 13:10:42\ntags: [Mac,代理,终端]\n---\n\n\n### 一、安装 brew 工具\n```\n$ curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1\n```\n\n### 二、安装 Solarized 配色工具\n\nSolarized是目前最完整的Terminal/Editor/IDE配色项目，要在 Mac OS X 终端里舒服的使用命令行（至少）需要给3个工具配色，terminal、vim 和 ls。这里不得不提和Terminal相同功能的工具iTerm2。\n\n\n#### 1、下载 Solarized：\n```\n$ git clone git://github.com/altercation/solarized.git\n```\n\n#### 2、配色方案 Solarized 导入\n    \nMac OS X 自带的 Terminal 和免费的 iTerm2 都是很好用的工具，iTerm2 可以切分成多窗口，更方便一些。\n\n如果你使用的是 Terminal，在solarized/osx-terminal.app-colors-solarized 下双击 Solarized Dark ansi.terminal 和 Solarized Light ansi.terminal 就会自动导入两种配色方案 Dark 和 Light 到 Terminal.app 里。\n\n如果你使用的是 iTerm2 的话，到 solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm 里。\n\n#### 3、vim的配色最好和终端一致\n```    \n$ cd solarized\n$ cd vim-colors-solarized/colors\n$ mkdir -p ~/.vim/colors\n$ cp solarized.vim ~/.vim/colors/\n$ vi ~/.vimrc 添加以下代码\n\tsyntax on\n\tset background=dark\n\tcolorscheme solarized\n```\n    \n#### 4、ls\nMacOSX是基于FreeBSD的，所以一些工具ls，top等都是BSD那一套，ls不是GNU ls，所以即使 Terminal / iTerm2 配置了颜色，但是在Mac上敲入ls命令也不会显示高亮，可以通过安装coreutils来解决（brew install coreutils），不过如果对ls颜色不挑剔的话有个简单办法就是在 .bash_profile 里输出 CLICOLOR=1：\n\n```\n$ vi ~/.bash_profile\n\texport CLICOLOR=1\n```\n\n#### 5、ls高亮设置\n```   \n$ sudo brew install xz coreutils\n$ gdircolors --print-database > ~/.dir_colors\n$ vim ~/.bash_profile 添加以下代码\n\tif brew list | grep coreutils > /dev/null ; then\n\t\tPATH=\"$(brew --prefix coreutils)/libexec/gnubin:$PATH\"\n\t\talias ls='ls -F --show-control-chars --color=auto'\n\t\teval `gdircolors -b $HOME/.dir_colors`\n\tfi\n```\n\n#### 6、grep高亮设置\n```\n$ vim ~/.bash_profile 添加以下代码\n\talias grep='grep --color'\n\talias egrep='egrep --color'\n\talias fgrep='fgrep --color'\n```\n\n### 三、增强命令行工具\n添加ll、l、la指令\n\n```\n$ vim ~/.bash_profile 添加以下代码\n    alias ll='ls -alF'\n    alias la='ls -A'\n    alias l='ls -CF'\n```\n\n\n### 四、补充\n也可以玩一下 Terminal + Tmux、zsh + oh-my-zsh + powerline 一套。\nwindows下的 [babun](http://babun.github.io/) 也不错\n\n\n### 五、安装homebrew、solarized\n[homebrew & solarized](https://github.com/victorquan/Mac-Terminal-and-Vim-configuration)\n\n### 六、安装whistle代理工具\n[whistle github 源码](https://github.com/avwo/whistle) \n\n#### 1、安装node（npm）\n[详见快速安装node](http://victorquan.com/2017/02/21/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85node%E7%AC%94%E8%AE%B0/)\n\n\n#### 2、安装whistle\n```\n$ sudo npm install -g whistle\n```\n\n\n#### 3、安装chrome的switch插件\n```\n$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx\n```\n\n\n#### 4、SwitchOmega 配置参数\n```\n127.0.0.1:8899\n```\n\n\n#### 5、启动whistle\n```\n$ sudo whistle start\n```\n\n\n### 七、安装markdown转成ppt插件landslide\n[参考landslide](https://github.com/adamzap/landslide)\n\n如果你还未安装pip，见 [https://pip.pypa.io/en/latest/installing/](https://pip.pypa.io/en/latest/installing/)\n使用方法\n\n```\n$ landslide test.md -i -o > test.html\n```\n\n### 八、安装php composer\n#### 1、安装方法\n方法一，使用curl安装: \n\n```\n$ curl -sS https://getcomposer.org/installer | php\n```\n\n方法二，若没有安装curl，可以通过另外一种方式安装: \n\n```\n$ php -r \"readfile('https://getcomposer.org/installer');\" | php\n```\n\n方法三，手动下载:\n\n[Download Composer](https://getcomposer.org/composer.phar)\n    \n#### 2、将下载好的composer.phar移动到bin中成为全域指令\n```\n$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n#### 3、修改权限\n```\n$ sudo chmod a+x composer\n```\n\n\n\n","slug":"配置自己的MAC","published":1,"updated":"2017-02-24T02:30:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopfjjjs000enc0016nil8rz","content":"<h3 id=\"一、安装-brew-工具\"><a href=\"#一、安装-brew-工具\" class=\"headerlink\" title=\"一、安装 brew 工具\"></a>一、安装 brew 工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1</div></pre></td></tr></table></figure>\n<h3 id=\"二、安装-Solarized-配色工具\"><a href=\"#二、安装-Solarized-配色工具\" class=\"headerlink\" title=\"二、安装 Solarized 配色工具\"></a>二、安装 Solarized 配色工具</h3><p>Solarized是目前最完整的Terminal/Editor/IDE配色项目，要在 Mac OS X 终端里舒服的使用命令行（至少）需要给3个工具配色，terminal、vim 和 ls。这里不得不提和Terminal相同功能的工具iTerm2。</p>\n<h4 id=\"1、下载-Solarized：\"><a href=\"#1、下载-Solarized：\" class=\"headerlink\" title=\"1、下载 Solarized：\"></a>1、下载 Solarized：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/altercation/solarized.git</div></pre></td></tr></table></figure>\n<h4 id=\"2、配色方案-Solarized-导入\"><a href=\"#2、配色方案-Solarized-导入\" class=\"headerlink\" title=\"2、配色方案 Solarized 导入\"></a>2、配色方案 Solarized 导入</h4><p>Mac OS X 自带的 Terminal 和免费的 iTerm2 都是很好用的工具，iTerm2 可以切分成多窗口，更方便一些。</p>\n<p>如果你使用的是 Terminal，在solarized/osx-terminal.app-colors-solarized 下双击 Solarized Dark ansi.terminal 和 Solarized Light ansi.terminal 就会自动导入两种配色方案 Dark 和 Light 到 Terminal.app 里。</p>\n<p>如果你使用的是 iTerm2 的话，到 solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm 里。</p>\n<h4 id=\"3、vim的配色最好和终端一致\"><a href=\"#3、vim的配色最好和终端一致\" class=\"headerlink\" title=\"3、vim的配色最好和终端一致\"></a>3、vim的配色最好和终端一致</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd solarized</div><div class=\"line\">$ cd vim-colors-solarized/colors</div><div class=\"line\">$ mkdir -p ~/.vim/colors</div><div class=\"line\">$ cp solarized.vim ~/.vim/colors/</div><div class=\"line\">$ vi ~/.vimrc 添加以下代码</div><div class=\"line\">\tsyntax on</div><div class=\"line\">\tset background=dark</div><div class=\"line\">\tcolorscheme solarized</div></pre></td></tr></table></figure>\n<h4 id=\"4、ls\"><a href=\"#4、ls\" class=\"headerlink\" title=\"4、ls\"></a>4、ls</h4><p>MacOSX是基于FreeBSD的，所以一些工具ls，top等都是BSD那一套，ls不是GNU ls，所以即使 Terminal / iTerm2 配置了颜色，但是在Mac上敲入ls命令也不会显示高亮，可以通过安装coreutils来解决（brew install coreutils），不过如果对ls颜色不挑剔的话有个简单办法就是在 .bash_profile 里输出 CLICOLOR=1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vi ~/.bash_profile</div><div class=\"line\">\texport CLICOLOR=1</div></pre></td></tr></table></figure>\n<h4 id=\"5、ls高亮设置\"><a href=\"#5、ls高亮设置\" class=\"headerlink\" title=\"5、ls高亮设置\"></a>5、ls高亮设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo brew install xz coreutils</div><div class=\"line\">$ gdircolors --print-database &gt; ~/.dir_colors</div><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">\tif brew list | grep coreutils &gt; /dev/null ; then</div><div class=\"line\">\t\tPATH=&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot;</div><div class=\"line\">\t\talias ls=&apos;ls -F --show-control-chars --color=auto&apos;</div><div class=\"line\">\t\teval `gdircolors -b $HOME/.dir_colors`</div><div class=\"line\">\tfi</div></pre></td></tr></table></figure>\n<h4 id=\"6、grep高亮设置\"><a href=\"#6、grep高亮设置\" class=\"headerlink\" title=\"6、grep高亮设置\"></a>6、grep高亮设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">\talias grep=&apos;grep --color&apos;</div><div class=\"line\">\talias egrep=&apos;egrep --color&apos;</div><div class=\"line\">\talias fgrep=&apos;fgrep --color&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"三、增强命令行工具\"><a href=\"#三、增强命令行工具\" class=\"headerlink\" title=\"三、增强命令行工具\"></a>三、增强命令行工具</h3><p>添加ll、l、la指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">    alias ll=&apos;ls -alF&apos;</div><div class=\"line\">    alias la=&apos;ls -A&apos;</div><div class=\"line\">    alias l=&apos;ls -CF&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"四、补充\"><a href=\"#四、补充\" class=\"headerlink\" title=\"四、补充\"></a>四、补充</h3><p>也可以玩一下 Terminal + Tmux、zsh + oh-my-zsh + powerline 一套。<br>windows下的 <a href=\"http://babun.github.io/\" target=\"_blank\" rel=\"external\">babun</a> 也不错</p>\n<h3 id=\"五、安装homebrew、solarized\"><a href=\"#五、安装homebrew、solarized\" class=\"headerlink\" title=\"五、安装homebrew、solarized\"></a>五、安装homebrew、solarized</h3><p><a href=\"https://github.com/victorquan/Mac-Terminal-and-Vim-configuration\" target=\"_blank\" rel=\"external\">homebrew &amp; solarized</a></p>\n<h3 id=\"六、安装whistle代理工具\"><a href=\"#六、安装whistle代理工具\" class=\"headerlink\" title=\"六、安装whistle代理工具\"></a>六、安装whistle代理工具</h3><p><a href=\"https://github.com/avwo/whistle\" target=\"_blank\" rel=\"external\">whistle github 源码</a> </p>\n<h4 id=\"1、安装node（npm）\"><a href=\"#1、安装node（npm）\" class=\"headerlink\" title=\"1、安装node（npm）\"></a>1、安装node（npm）</h4><p><a href=\"http://victorquan.com/2017/02/21/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85node%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">详见快速安装node</a></p>\n<h4 id=\"2、安装whistle\"><a href=\"#2、安装whistle\" class=\"headerlink\" title=\"2、安装whistle\"></a>2、安装whistle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g whistle</div></pre></td></tr></table></figure>\n<h4 id=\"3、安装chrome的switch插件\"><a href=\"#3、安装chrome的switch插件\" class=\"headerlink\" title=\"3、安装chrome的switch插件\"></a>3、安装chrome的switch插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx</div></pre></td></tr></table></figure>\n<h4 id=\"4、SwitchOmega-配置参数\"><a href=\"#4、SwitchOmega-配置参数\" class=\"headerlink\" title=\"4、SwitchOmega 配置参数\"></a>4、SwitchOmega 配置参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:8899</div></pre></td></tr></table></figure>\n<h4 id=\"5、启动whistle\"><a href=\"#5、启动whistle\" class=\"headerlink\" title=\"5、启动whistle\"></a>5、启动whistle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo whistle start</div></pre></td></tr></table></figure>\n<h3 id=\"七、安装markdown转成ppt插件landslide\"><a href=\"#七、安装markdown转成ppt插件landslide\" class=\"headerlink\" title=\"七、安装markdown转成ppt插件landslide\"></a>七、安装markdown转成ppt插件landslide</h3><p><a href=\"https://github.com/adamzap/landslide\" target=\"_blank\" rel=\"external\">参考landslide</a></p>\n<p>如果你还未安装pip，见 <a href=\"https://pip.pypa.io/en/latest/installing/\" target=\"_blank\" rel=\"external\">https://pip.pypa.io/en/latest/installing/</a><br>使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ landslide test.md -i -o &gt; test.html</div></pre></td></tr></table></figure>\n<h3 id=\"八、安装php-composer\"><a href=\"#八、安装php-composer\" class=\"headerlink\" title=\"八、安装php composer\"></a>八、安装php composer</h3><h4 id=\"1、安装方法\"><a href=\"#1、安装方法\" class=\"headerlink\" title=\"1、安装方法\"></a>1、安装方法</h4><p>方法一，使用curl安装: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure>\n<p>方法二，若没有安装curl，可以通过另外一种方式安装: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -r &quot;readfile(&apos;https://getcomposer.org/installer&apos;);&quot; | php</div></pre></td></tr></table></figure>\n<p>方法三，手动下载:</p>\n<p><a href=\"https://getcomposer.org/composer.phar\" target=\"_blank\" rel=\"external\">Download Composer</a></p>\n<h4 id=\"2、将下载好的composer-phar移动到bin中成为全域指令\"><a href=\"#2、将下载好的composer-phar移动到bin中成为全域指令\" class=\"headerlink\" title=\"2、将下载好的composer.phar移动到bin中成为全域指令\"></a>2、将下载好的composer.phar移动到bin中成为全域指令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure>\n<h4 id=\"3、修改权限\"><a href=\"#3、修改权限\" class=\"headerlink\" title=\"3、修改权限\"></a>3、修改权限</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod a+x composer</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、安装-brew-工具\"><a href=\"#一、安装-brew-工具\" class=\"headerlink\" title=\"一、安装 brew 工具\"></a>一、安装 brew 工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1</div></pre></td></tr></table></figure>\n<h3 id=\"二、安装-Solarized-配色工具\"><a href=\"#二、安装-Solarized-配色工具\" class=\"headerlink\" title=\"二、安装 Solarized 配色工具\"></a>二、安装 Solarized 配色工具</h3><p>Solarized是目前最完整的Terminal/Editor/IDE配色项目，要在 Mac OS X 终端里舒服的使用命令行（至少）需要给3个工具配色，terminal、vim 和 ls。这里不得不提和Terminal相同功能的工具iTerm2。</p>\n<h4 id=\"1、下载-Solarized：\"><a href=\"#1、下载-Solarized：\" class=\"headerlink\" title=\"1、下载 Solarized：\"></a>1、下载 Solarized：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/altercation/solarized.git</div></pre></td></tr></table></figure>\n<h4 id=\"2、配色方案-Solarized-导入\"><a href=\"#2、配色方案-Solarized-导入\" class=\"headerlink\" title=\"2、配色方案 Solarized 导入\"></a>2、配色方案 Solarized 导入</h4><p>Mac OS X 自带的 Terminal 和免费的 iTerm2 都是很好用的工具，iTerm2 可以切分成多窗口，更方便一些。</p>\n<p>如果你使用的是 Terminal，在solarized/osx-terminal.app-colors-solarized 下双击 Solarized Dark ansi.terminal 和 Solarized Light ansi.terminal 就会自动导入两种配色方案 Dark 和 Light 到 Terminal.app 里。</p>\n<p>如果你使用的是 iTerm2 的话，到 solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm 里。</p>\n<h4 id=\"3、vim的配色最好和终端一致\"><a href=\"#3、vim的配色最好和终端一致\" class=\"headerlink\" title=\"3、vim的配色最好和终端一致\"></a>3、vim的配色最好和终端一致</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd solarized</div><div class=\"line\">$ cd vim-colors-solarized/colors</div><div class=\"line\">$ mkdir -p ~/.vim/colors</div><div class=\"line\">$ cp solarized.vim ~/.vim/colors/</div><div class=\"line\">$ vi ~/.vimrc 添加以下代码</div><div class=\"line\">\tsyntax on</div><div class=\"line\">\tset background=dark</div><div class=\"line\">\tcolorscheme solarized</div></pre></td></tr></table></figure>\n<h4 id=\"4、ls\"><a href=\"#4、ls\" class=\"headerlink\" title=\"4、ls\"></a>4、ls</h4><p>MacOSX是基于FreeBSD的，所以一些工具ls，top等都是BSD那一套，ls不是GNU ls，所以即使 Terminal / iTerm2 配置了颜色，但是在Mac上敲入ls命令也不会显示高亮，可以通过安装coreutils来解决（brew install coreutils），不过如果对ls颜色不挑剔的话有个简单办法就是在 .bash_profile 里输出 CLICOLOR=1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vi ~/.bash_profile</div><div class=\"line\">\texport CLICOLOR=1</div></pre></td></tr></table></figure>\n<h4 id=\"5、ls高亮设置\"><a href=\"#5、ls高亮设置\" class=\"headerlink\" title=\"5、ls高亮设置\"></a>5、ls高亮设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo brew install xz coreutils</div><div class=\"line\">$ gdircolors --print-database &gt; ~/.dir_colors</div><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">\tif brew list | grep coreutils &gt; /dev/null ; then</div><div class=\"line\">\t\tPATH=&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot;</div><div class=\"line\">\t\talias ls=&apos;ls -F --show-control-chars --color=auto&apos;</div><div class=\"line\">\t\teval `gdircolors -b $HOME/.dir_colors`</div><div class=\"line\">\tfi</div></pre></td></tr></table></figure>\n<h4 id=\"6、grep高亮设置\"><a href=\"#6、grep高亮设置\" class=\"headerlink\" title=\"6、grep高亮设置\"></a>6、grep高亮设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">\talias grep=&apos;grep --color&apos;</div><div class=\"line\">\talias egrep=&apos;egrep --color&apos;</div><div class=\"line\">\talias fgrep=&apos;fgrep --color&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"三、增强命令行工具\"><a href=\"#三、增强命令行工具\" class=\"headerlink\" title=\"三、增强命令行工具\"></a>三、增强命令行工具</h3><p>添加ll、l、la指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.bash_profile 添加以下代码</div><div class=\"line\">    alias ll=&apos;ls -alF&apos;</div><div class=\"line\">    alias la=&apos;ls -A&apos;</div><div class=\"line\">    alias l=&apos;ls -CF&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"四、补充\"><a href=\"#四、补充\" class=\"headerlink\" title=\"四、补充\"></a>四、补充</h3><p>也可以玩一下 Terminal + Tmux、zsh + oh-my-zsh + powerline 一套。<br>windows下的 <a href=\"http://babun.github.io/\" target=\"_blank\" rel=\"external\">babun</a> 也不错</p>\n<h3 id=\"五、安装homebrew、solarized\"><a href=\"#五、安装homebrew、solarized\" class=\"headerlink\" title=\"五、安装homebrew、solarized\"></a>五、安装homebrew、solarized</h3><p><a href=\"https://github.com/victorquan/Mac-Terminal-and-Vim-configuration\" target=\"_blank\" rel=\"external\">homebrew &amp; solarized</a></p>\n<h3 id=\"六、安装whistle代理工具\"><a href=\"#六、安装whistle代理工具\" class=\"headerlink\" title=\"六、安装whistle代理工具\"></a>六、安装whistle代理工具</h3><p><a href=\"https://github.com/avwo/whistle\" target=\"_blank\" rel=\"external\">whistle github 源码</a> </p>\n<h4 id=\"1、安装node（npm）\"><a href=\"#1、安装node（npm）\" class=\"headerlink\" title=\"1、安装node（npm）\"></a>1、安装node（npm）</h4><p><a href=\"http://victorquan.com/2017/02/21/%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85node%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">详见快速安装node</a></p>\n<h4 id=\"2、安装whistle\"><a href=\"#2、安装whistle\" class=\"headerlink\" title=\"2、安装whistle\"></a>2、安装whistle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g whistle</div></pre></td></tr></table></figure>\n<h4 id=\"3、安装chrome的switch插件\"><a href=\"#3、安装chrome的switch插件\" class=\"headerlink\" title=\"3、安装chrome的switch插件\"></a>3、安装chrome的switch插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/victorquan/Mac-Terminal-and-Vim-configuration/blob/master/SwitchyOmega.crx</div></pre></td></tr></table></figure>\n<h4 id=\"4、SwitchOmega-配置参数\"><a href=\"#4、SwitchOmega-配置参数\" class=\"headerlink\" title=\"4、SwitchOmega 配置参数\"></a>4、SwitchOmega 配置参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:8899</div></pre></td></tr></table></figure>\n<h4 id=\"5、启动whistle\"><a href=\"#5、启动whistle\" class=\"headerlink\" title=\"5、启动whistle\"></a>5、启动whistle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo whistle start</div></pre></td></tr></table></figure>\n<h3 id=\"七、安装markdown转成ppt插件landslide\"><a href=\"#七、安装markdown转成ppt插件landslide\" class=\"headerlink\" title=\"七、安装markdown转成ppt插件landslide\"></a>七、安装markdown转成ppt插件landslide</h3><p><a href=\"https://github.com/adamzap/landslide\" target=\"_blank\" rel=\"external\">参考landslide</a></p>\n<p>如果你还未安装pip，见 <a href=\"https://pip.pypa.io/en/latest/installing/\" target=\"_blank\" rel=\"external\">https://pip.pypa.io/en/latest/installing/</a><br>使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ landslide test.md -i -o &gt; test.html</div></pre></td></tr></table></figure>\n<h3 id=\"八、安装php-composer\"><a href=\"#八、安装php-composer\" class=\"headerlink\" title=\"八、安装php composer\"></a>八、安装php composer</h3><h4 id=\"1、安装方法\"><a href=\"#1、安装方法\" class=\"headerlink\" title=\"1、安装方法\"></a>1、安装方法</h4><p>方法一，使用curl安装: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure>\n<p>方法二，若没有安装curl，可以通过另外一种方式安装: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php -r &quot;readfile(&apos;https://getcomposer.org/installer&apos;);&quot; | php</div></pre></td></tr></table></figure>\n<p>方法三，手动下载:</p>\n<p><a href=\"https://getcomposer.org/composer.phar\" target=\"_blank\" rel=\"external\">Download Composer</a></p>\n<h4 id=\"2、将下载好的composer-phar移动到bin中成为全域指令\"><a href=\"#2、将下载好的composer-phar移动到bin中成为全域指令\" class=\"headerlink\" title=\"2、将下载好的composer.phar移动到bin中成为全域指令\"></a>2、将下载好的composer.phar移动到bin中成为全域指令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure>\n<h4 id=\"3、修改权限\"><a href=\"#3、修改权限\" class=\"headerlink\" title=\"3、修改权限\"></a>3、修改权限</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod a+x composer</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjopfjjjf0000nc00bmykp555","tag_id":"cjopfjjjk0004nc00a9igepav","_id":"cjopfjjjp000anc00epbj8eag"},{"post_id":"cjopfjjji0002nc00a115rvvt","tag_id":"cjopfjjjo0009nc001evl65b2","_id":"cjopfjjjt000gnc00fw27fcb6"},{"post_id":"cjopfjjji0002nc00a115rvvt","tag_id":"cjopfjjjr000dnc00xpqxpytk","_id":"cjopfjjjt000hnc00t1azrxto"},{"post_id":"cjopfjjjl0005nc00p8bck7do","tag_id":"cjopfjjjt000fnc00ly631ygj","_id":"cjopfjjju000lnc0083g6zs3d"},{"post_id":"cjopfjjjl0005nc00p8bck7do","tag_id":"cjopfjjjt000inc00kixh3iwo","_id":"cjopfjjju000mnc00z6bfjlnf"},{"post_id":"cjopfjjjl0005nc00p8bck7do","tag_id":"cjopfjjjt000jnc0065326at0","_id":"cjopfjjju000onc006v5q18l6"},{"post_id":"cjopfjjjm0007nc00ez91w7g8","tag_id":"cjopfjjju000knc00q3yq2vaz","_id":"cjopfjjju000qnc00tbe96ad5"},{"post_id":"cjopfjjjm0007nc00ez91w7g8","tag_id":"cjopfjjju000nnc00tofvojir","_id":"cjopfjjjv000rnc00t7a5t03t"},{"post_id":"cjopfjjjo0008nc00lgae89s2","tag_id":"cjopfjjju000pnc00qp0lnrka","_id":"cjopfjjjv000unc00wf2eas5a"},{"post_id":"cjopfjjjo0008nc00lgae89s2","tag_id":"cjopfjjjv000snc00dimczgwp","_id":"cjopfjjjv000vnc00t35r2mse"},{"post_id":"cjopfjjjp000bnc00vkaoainr","tag_id":"cjopfjjjv000tnc00dsyj5g4d","_id":"cjopfjjjw000ync00dkuhcdns"},{"post_id":"cjopfjjjp000bnc00vkaoainr","tag_id":"cjopfjjjv000wnc00fhw6v1hl","_id":"cjopfjjjw000znc003j77kyjo"},{"post_id":"cjopfjjjr000cnc00238wyn7q","tag_id":"cjopfjjjk0004nc00a9igepav","_id":"cjopfjjjw0011nc008ldcfccj"},{"post_id":"cjopfjjjr000cnc00238wyn7q","tag_id":"cjopfjjjw000xnc00oevsyzzq","_id":"cjopfjjjw0012nc00784v7wb7"},{"post_id":"cjopfjjjs000enc0016nil8rz","tag_id":"cjopfjjjw0010nc00pzqfvti7","_id":"cjopfjjjx0015nc0073cpw32r"},{"post_id":"cjopfjjjs000enc0016nil8rz","tag_id":"cjopfjjjw0013nc004ncel1y6","_id":"cjopfjjjx0016nc00nbt3k20n"},{"post_id":"cjopfjjjs000enc0016nil8rz","tag_id":"cjopfjjjx0014nc003zd56reg","_id":"cjopfjjjx0017nc003svav572"}],"Tag":[{"name":"git","_id":"cjopfjjjk0004nc00a9igepav"},{"name":"crontab","_id":"cjopfjjjo0009nc001evl65b2"},{"name":"Linux","_id":"cjopfjjjr000dnc00xpqxpytk"},{"name":"共享内存","_id":"cjopfjjjt000fnc00ly631ygj"},{"name":"shmop","_id":"cjopfjjjt000inc00kixh3iwo"},{"name":"shm","_id":"cjopfjjjt000jnc0065326at0"},{"name":"sass","_id":"cjopfjjju000knc00q3yq2vaz"},{"name":"前端","_id":"cjopfjjju000nnc00tofvojir"},{"name":"xx-net","_id":"cjopfjjju000pnc00qp0lnrka"},{"name":"Internet","_id":"cjopfjjjv000snc00dimczgwp"},{"name":"node","_id":"cjopfjjjv000tnc00dsyj5g4d"},{"name":"nvm","_id":"cjopfjjjv000wnc00fhw6v1hl"},{"name":"版本控制","_id":"cjopfjjjw000xnc00oevsyzzq"},{"name":"Mac","_id":"cjopfjjjw0010nc00pzqfvti7"},{"name":"代理","_id":"cjopfjjjw0013nc004ncel1y6"},{"name":"终端","_id":"cjopfjjjx0014nc003zd56reg"}]}}